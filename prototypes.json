{
    "ActivateActCtx": {
        "neutralApiName": "ActivateActCtx",
        "prototype": ["BOOL ActivateActCtx(\\n  HANDLE    hActCtx,\\n  ULONG_PTR *lpCookie\\n);"],
        "return": {
            "native": "Int32",
            "dart": "int"
        },
        "params": {
            "hActCtx": {
                "native": "IntPtr",
                "dart": "int"
            },
            "lpCookie": {
                "native": "Pointer<IntPtr>",
                "dart": "Pointer<IntPtr>"
            },
            "dllLibrary": "kernel32",
            "comment": "The ActivateActCtx function activates the specified activation context. It does this by pushing the specified activation context to the top of the activation stack. The specified activation context is thus associated with the current thread and any appropriate side-by-side API functions."
        },
        "AllocConsole": {
            "neutralApiName": "AllocConsole",
            "prototype": ["BOOL WINAPI AllocConsole(void);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "kernel32",
            "comment": "Allocates a new console for the calling process."
        },
        "AngleArc": {
            "neutralApiName": "AngleArc",
            "prototype": ["BOOL AngleArc(\\n  HDC   hdc,\\n  int   x,\\n  int   y,\\n  DWORD r,\\n  FLOAT StartAngle,\\n  FLOAT SweepAngle\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "x": "Int32",
                "y": "Int32",
                "r": "Uint32",
                "StartAngle": "Float",
                "SweepAngle": "Float"
            },
            "dartParams": {
                "hdc": "int",
                "x": "int",
                "y": "int",
                "r": "int",
                "StartAngle": "double",
                "SweepAngle": "double"
            },
            "dllLibrary": "gdi32",
            "comment": "The AngleArc function draws a line segment and an arc. The line segment is drawn from the current position to the beginning of the arc. The arc is drawn along the perimeter of a circle with the given radius and center. The length of the arc is defined by the given start and sweep angles."
        },
        "AnimatePalette": {
            "neutralApiName": "AnimatePalette",
            "prototype": ["BOOL AnimatePalette(\\n  HPALETTE           hPal,\\n  UINT               iStartIndex,\\n  UINT               cEntries,\\n  const PALETTEENTRY *ppe\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hPal": "IntPtr",
                "iStartIndex": "Uint32",
                "cEntries": "Uint32",
                "ppe": "Pointer<PALETTEENTRY>"
            },
            "dartParams": {
                "hPal": "int",
                "iStartIndex": "int",
                "cEntries": "int",
                "ppe": "Pointer<PALETTEENTRY>"
            },
            "dllLibrary": "gdi32",
            "comment": "The AnimatePalette function replaces entries in the specified logical palette."
        },
        "AnimateWindow": {
            "neutralApiName": "AnimateWindow",
            "prototype": ["BOOL AnimateWindow(\\n  HWND  hWnd,\\n  DWORD dwTime,\\n  DWORD dwFlags\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "dwTime": "Uint32",
                "dwFlags": "Uint32"
            },
            "dartParams": {
                "hWnd": "int",
                "dwTime": "int",
                "dwFlags": "int"
            },
            "dllLibrary": "user32",
            "comment": "Enables you to produce special effects when showing or hiding windows. There are four types of animation: roll, slide, collapse or expand, and alpha-blended fade."
        },
        "AppendMenuW": {
            "neutralApiName": "AppendMenu",
            "prototype": ["BOOL AppendMenuW(\\n  HMENU    hMenu,\\n  UINT     uFlags,\\n  UINT_PTR uIDNewItem,\\n  LPCWSTR  lpNewItem\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMenu": "IntPtr",
                "uFlags": "Uint32",
                "uIDNewItem": "IntPtr",
                "lpNewItem": "Pointer<Utf16>"
            },
            "dartParams": {
                "hMenu": "int",
                "uFlags": "int",
                "uIDNewItem": "int",
                "lpNewItem": "Pointer<Utf16>"
            },
            "dllLibrary": "user32",
            "comment": "Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item."
        },
        "Arc": {
            "neutralApiName": "Arc",
            "prototype": ["BOOL Arc(\\n  HDC hdc,\\n  int x1,\\n  int y1,\\n  int x2,\\n  int y2,\\n  int x3,\\n  int y3,\\n  int x4,\\n  int y4\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "x1": "Int32",
                "y1": "Int32",
                "x2": "Int32",
                "y2": "Int32",
                "x3": "Int32",
                "y3": "Int32",
                "x4": "Int32",
                "y4": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "x1": "int",
                "y1": "int",
                "x2": "int",
                "y2": "int",
                "x3": "int",
                "y3": "int",
                "x4": "int",
                "y4": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The Arc function draws an elliptical arc."
        },
        "ArcTo": {
            "neutralApiName": "ArcTo",
            "prototype": ["BOOL ArcTo(\\n  HDC hdc,\\n  int left,\\n  int top,\\n  int right,\\n  int bottom,\\n  int xr1,\\n  int yr1,\\n  int xr2,\\n  int yr2\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "left": "Int32",
                "top": "Int32",
                "right": "Int32",
                "bottom": "Int32",
                "xr1": "Int32",
                "yr1": "Int32",
                "xr2": "Int32",
                "yr2": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "left": "int",
                "top": "int",
                "right": "int",
                "bottom": "int",
                "xr1": "int",
                "yr1": "int",
                "xr2": "int",
                "yr2": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The ArcTo function draws an elliptical arc."
        },
        "AttachConsole": {
            "neutralApiName": "AttachConsole",
            "prototype": ["BOOL WINAPI AttachConsole(\\n  _In_Â DWORD dwProcessId\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "dwProcessId": "Uint32"
            },
            "dartParams": {
                "dwProcessId": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Attaches the calling process to the console of the specified process."
        },
        "Beep": {
            "neutralApiName": "Beep",
            "prototype": ["BOOL Beep(\\n  DWORD dwFreq,\\n  DWORD dwDuration\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "dwFreq": "Uint32",
                "dwDuration": "Uint32"
            },
            "dartParams": {
                "dwFreq": "int",
                "dwDuration": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Generates simple tones on the speaker. The function is synchronous; it performs an alertable wait and does not return control to its caller until the sound finishes."
        },
        "BeginPaint": {
            "neutralApiName": "BeginPaint",
            "prototype": ["HDC BeginPaint(\\n  HWND          hWnd,\\n  LPPAINTSTRUCT lpPaint\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "lpPaint": "Pointer<PAINTSTRUCT>"
            },
            "dartParams": {
                "hWnd": "int",
                "lpPaint": "Pointer<PAINTSTRUCT>"
            },
            "dllLibrary": "user32",
            "comment": "The BeginPaint function prepares the specified window for painting and fills a PAINTSTRUCT structure with information about the painting."
        },
        "BeginPath": {
            "neutralApiName": "BeginPath",
            "prototype": ["BOOL BeginPath(\\n  HDC hdc\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr"
            },
            "dartParams": {
                "hdc": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The BeginPath function opens a path bracket in the specified device context."
        },
        "BeginUpdateResourceW": {
            "neutralApiName": "BeginUpdateResource",
            "prototype": ["HANDLE BeginUpdateResourceW(\\n  LPCWSTR pFileName,\\n  BOOL    bDeleteExistingResources\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "pFilename": "Pointer<Utf16>",
                "bDeleteExistingResources": "Int32"
            },
            "dartParams": {
                "pFilename": "Pointer<Utf16>",
                "bDeleteExistingResources": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module."
        },
        "BitBlt": {
            "neutralApiName": "BitBlt",
            "prototype": ["BOOL BitBlt(\\n  HDC   hdc,\\n  int   x,\\n  int   y,\\n  int   cx,\\n  int   cy,\\n  HDC   hdcSrc,\\n  int   x1,\\n  int   y1,\\n  DWORD rop\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "x": "Int32",
                "y": "Int32",
                "cx": "Int32",
                "cy": "Int32",
                "hdcSrc": "IntPtr",
                "x1": "Int32",
                "y1": "Int32",
                "rop": "Uint32"
            },
            "dartParams": {
                "hdc": "int",
                "x": "int",
                "y": "int",
                "cx": "int",
                "cy": "int",
                "hdcSrc": "int",
                "x1": "int",
                "y1": "int",
                "rop": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The BitBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context."
        },
        "BluetoothAuthenticateDeviceEx": {
            "neutralApiName": "BluetoothAuthenticateDeviceEx",
            "prototype": ["DWORD BluetoothAuthenticateDeviceEx(\\n  HWND                        hwndParentIn,\\n  HANDLE                      hRadioIn,\\n  BLUETOOTH_DEVICE_INFO       *pbtdiInout,\\n  PBLUETOOTH_OOB_DATA_INFO    pbtOobData,\\n  AUTHENTICATION_REQUIREMENTS authenticationRequirement\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "hwndParentIn": "IntPtr",
                "hRadioIn": "IntPtr",
                "pbtdiInout": "Pointer<BLUETOOTH_DEVICE_INFO>",
                "pbtOobData": "IntPtr",
                "authenticationRequirement": "Int32"
            },
            "dartParams": {
                "hwndParentIn": "int",
                "hRadioIn": "int",
                "pbtdiInout": "Pointer<BLUETOOTH_DEVICE_INFO>",
                "pbtOobData": "int",
                "authenticationRequirement": "int"
            },
            "dllLibrary": "bthprops",
            "comment": "The BluetoothAuthenticateDeviceEx function sends an authentication request to a remote Bluetooth device. Additionally, this function allows for out-of-band data to be passed into the function call for the device being authenticated."
        },
        "BluetoothFindDeviceClose": {
            "neutralApiName": "BluetoothFindDeviceClose",
            "prototype": ["BOOL BluetoothFindDeviceClose(\\n  HBLUETOOTH_DEVICE_FIND hFind\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hFind": "IntPtr"
            },
            "dartParams": {
                "hFind": "int"
            },
            "dllLibrary": "bthprops",
            "comment": "The BluetoothFindDeviceClose function closes an enumeration handle associated with a device query."
        },
        "BluetoothFindFirstDevice": {
            "neutralApiName": "BluetoothFindFirstDevice",
            "prototype": ["HBLUETOOTH_DEVICE_FIND BluetoothFindFirstDevice(\\n  const BLUETOOTH_DEVICE_SEARCH_PARAMS *pbtsp,\\n  BLUETOOTH_DEVICE_INFO                *pbtdi\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "pbtsp": "Pointer<BLUETOOTH_DEVICE_SEARCH_PARAMS>",
                "pbtdi": "Pointer<BLUETOOTH_DEVICE_INFO>"
            },
            "dartParams": {
                "pbtsp": "Pointer<BLUETOOTH_DEVICE_SEARCH_PARAMS>",
                "pbtdi": "Pointer<BLUETOOTH_DEVICE_INFO>"
            },
            "dllLibrary": "bthprops",
            "comment": "The BluetoothFindFirstDevice function begins the enumeration Bluetooth devices."
        },
        "BluetoothFindFirstRadio": {
            "neutralApiName": "BluetoothFindFirstRadio",
            "prototype": ["HBLUETOOTH_RADIO_FIND BluetoothFindFirstRadio(\\n  const BLUETOOTH_FIND_RADIO_PARAMS *pbtfrp,\\n  HANDLE                            *phRadio\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "pbtfrp": "Pointer<BLUETOOTH_FIND_RADIO_PARAMS>",
                "phRadio": "Pointer<IntPtr>"
            },
            "dartParams": {
                "pbtfrp": "Pointer<BLUETOOTH_FIND_RADIO_PARAMS>",
                "phRadio": "Pointer<IntPtr>"
            },
            "dllLibrary": "bthprops",
            "comment": "The BluetoothFindFirstRadio function begins the enumeration of local Bluetooth radios."
        },
        "BluetoothFindNextDevice": {
            "neutralApiName": "BluetoothFindNextDevice",
            "prototype": ["BOOL BluetoothFindNextDevice(\\n  HBLUETOOTH_DEVICE_FIND hFind,\\n  BLUETOOTH_DEVICE_INFO  *pbtdi\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hFind": "IntPtr",
                "pbtdi": "Pointer<BLUETOOTH_DEVICE_INFO>"
            },
            "dartParams": {
                "hFind": "int",
                "pbtdi": "Pointer<BLUETOOTH_DEVICE_INFO>"
            },
            "dllLibrary": "bthprops",
            "comment": "The BluetoothFindNextDevice function finds the next Bluetooth device."
        },
        "BluetoothFindNextRadio": {
            "neutralApiName": "BluetoothFindNextRadio",
            "prototype": ["BOOL BluetoothFindNextRadio(\\n  HBLUETOOTH_RADIO_FIND hFind,\\n  HANDLE                *phRadio\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hFind": "IntPtr",
                "phRadio": "Pointer<IntPtr>"
            },
            "dartParams": {
                "hFind": "int",
                "phRadio": "Pointer<IntPtr>"
            },
            "dllLibrary": "bthprops",
            "comment": "The BluetoothFindNextRadio function finds the next Bluetooth radio."
        },
        "BluetoothFindRadioClose": {
            "neutralApiName": "BluetoothFindRadioClose",
            "prototype": ["BOOL BluetoothFindRadioClose(\\n  HBLUETOOTH_RADIO_FIND hFind\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hFind": "IntPtr"
            },
            "dartParams": {
                "hFind": "int"
            },
            "dllLibrary": "bthprops",
            "comment": "The BluetoothFindRadioClose function closes the enumeration handle associated with finding Bluetooth radios."
        },
        "BluetoothIsConnectable": {
            "neutralApiName": "BluetoothIsConnectable",
            "prototype": ["BOOL BluetoothIsConnectable(\\n  HANDLE hRadio\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hRadio": "IntPtr"
            },
            "dartParams": {
                "hRadio": "int"
            },
            "dllLibrary": "bthprops",
            "comment": "The BluetoothIsConnectable function determines whether a Bluetooth radio or radios is connectable."
        },
        "BluetoothIsDiscoverable": {
            "neutralApiName": "BluetoothIsDiscoverable",
            "prototype": ["BOOL BluetoothIsDiscoverable(\\n  HANDLE hRadio\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hRadio": "IntPtr"
            },
            "dartParams": {
                "hRadio": "int"
            },
            "dllLibrary": "bthprops",
            "comment": "The BluetoothIsDiscoverable function determines whether a Bluetooth radio or radios is discoverable."
        },
        "BluetoothUpdateDeviceRecord": {
            "neutralApiName": "BluetoothUpdateDeviceRecord",
            "prototype": ["DWORD BluetoothUpdateDeviceRecord(\\n  const BLUETOOTH_DEVICE_INFO *pbtdi\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "pbtdi": "Pointer<BLUETOOTH_DEVICE_INFO>"
            },
            "dartParams": {
                "pbtdi": "Pointer<BLUETOOTH_DEVICE_INFO>"
            },
            "dllLibrary": "bthprops",
            "comment": "The BluetoothUpdateDeviceRecord function updates the local computer cache about a Bluetooth device."
        },
        "BringWindowToTop": {
            "neutralApiName": "BringWindowToTop",
            "prototype": ["BOOL BringWindowToTop(\\n  HWND hWnd\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr"
            },
            "dartParams": {
                "hWnd": "int"
            },
            "dllLibrary": "user32",
            "comment": "Brings the specified window to the top of the Z order. If the window is a top-level window, it is activated. If the window is a child window, the top-level parent window associated with the child window is activated."
        },
        "CallNtPowerInformation": {
            "neutralApiName": "CallNtPowerInformation",
            "prototype": ["NTSTATUS CallNtPowerInformation(\\n  POWER_INFORMATION_LEVEL InformationLevel,\\n  PVOID                   InputBuffer,\\n  ULONG                   InputBufferLength,\\n  PVOID                   OutputBuffer,\\n  ULONG                   OutputBufferLength\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "InformationLevel": "Int32",
                "InputBuffer": "Pointer",
                "InputBufferLength": "Uint32",
                "OutputBuffer": "Pointer",
                "OutputBufferLength": "Uint32"
            },
            "dartParams": {
                "InformationLevel": "int",
                "InputBuffer": "Pointer",
                "InputBufferLength": "int",
                "OutputBuffer": "Pointer",
                "OutputBufferLength": "int"
            },
            "dllLibrary": "powrprof",
            "comment": "Sets or retrieves power information."
        },
        "ChildWindowFromPoint": {
            "neutralApiName": "ChildWindowFromPoint",
            "prototype": ["HWND ChildWindowFromPoint(\\n  HWND  hWndParent,\\n  POINT Point\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hWndParent": "IntPtr",
                "Point": "Int64"
            },
            "dartParams": {
                "hWndParent": "int",
                "Point": "int"
            },
            "dllLibrary": "user32",
            "comment": "Determines which, if any, of the child windows belonging to a parent window contains the specified point. The search is restricted to immediate child windows. Grandchildren, and deeper descendant windows are not searched."
        },
        "ChildWindowFromPointEx": {
            "neutralApiName": "ChildWindowFromPointEx",
            "prototype": ["HWND ChildWindowFromPoint(\\n  HWND  hWndParent,\\n  POINT Point\\n  UINT  flags\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hWndParent": "IntPtr",
                "Point": "Int64",
                "flags": "Uint32"
            },
            "dartParams": {
                "hWndParent": "int",
                "Point": "int",
                "flags": "int"
            },
            "dllLibrary": "user32",
            "comment": "Determines which, if any, of the child windows belonging to the specified parent window contains the specified point. The function can ignore invisible, disabled, and transparent child windows. Grandchildren and deeper descendants are not searched."
        },
        "ChooseColorW": {
            "neutralApiName": "ChooseColor",
            "prototype": ["BOOL WINAPI ChooseColor(\\n  _Inout_ LPCHOOSECOLOR lpcc\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpcc": "Pointer<CHOOSECOLOR>"
            },
            "dartParams": {
                "lpcc": "Pointer<CHOOSECOLOR>"
            },
            "dllLibrary": "comdlg32",
            "comment": "Creates a Color dialog box that enables the user to select a color."
        },
        "ChooseFontW": {
            "neutralApiName": "ChooseFont",
            "prototype": ["BOOL WINAPI ChooseFont(\\n  _Inout_ LPCHOOSEFONT lpcf\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpcf": "Pointer<CHOOSEFONT>"
            },
            "dartParams": {
                "lpcf": "Pointer<CHOOSEFONT>"
            },
            "dllLibrary": "comdlg32",
            "comment": "Creates a Font dialog box that enables the user to choose attributes for a logical font. These attributes include a font family and associated font style, a point size, effects (underline, strikeout, and text color), and a script (or character set)."
        },
        "Chord": {
            "neutralApiName": "Chord",
            "prototype": ["BOOL Chord(\\n  HDC hdc,\\n  int x1,\\n  int y1,\\n  int x2,\\n  int y2,\\n  int x3,\\n  int y3,\\n  int x4,\\n  int y4\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "x1": "Int32",
                "y1": "Int32",
                "x2": "Int32",
                "y2": "Int32",
                "x3": "Int32",
                "y3": "Int32",
                "x4": "Int32",
                "y4": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "x1": "int",
                "y1": "int",
                "x2": "int",
                "y2": "int",
                "x3": "int",
                "y3": "int",
                "x4": "int",
                "y4": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The Chord function draws a chord (a region bounded by the intersection of an ellipse and a line segment, called a secant). The chord is outlined by using the current pen and filled by using the current brush."
        },
        "ClipCursor": {
            "neutralApiName": "ClipCursor",
            "prototype": ["BOOL ClipCursor(\\n  const RECT *lpRect\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpRect": "Pointer<RECT>"
            },
            "dartParams": {
                "lpRect": "Pointer<RECT>"
            },
            "dllLibrary": "user32",
            "comment": "Confines the cursor to a rectangular area on the screen. If a subsequent cursor position (set by the SetCursorPos function or the mouse) lies outside the rectangle, the system automatically adjusts the position to keep the cursor inside the rectangular area."
        },
        "CloseFigure": {
            "neutralApiName": "CloseFigure",
            "prototype": ["BOOL CloseFigure(\\n  HDC hdc);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr"
            },
            "dartParams": {
                "hdc": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The CloseFigure function closes an open figure in a path."
        },
        "CloseHandle": {
            "neutralApiName": "CloseHandle",
            "prototype": ["BOOL CloseHandle(\\n  HANDLE hObject\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hObject": "IntPtr"
            },
            "dartParams": {
                "hObject": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Closes an open object handle."
        },
        "ClosePseudoConsole": {
            "neutralApiName": "ClosePseudoConsole",
            "prototype": ["void WINAPI ClosePseudoConsole(\\n    _In_ HPCON hPC\\n);"],
            "nativeReturn": "Void",
            "dartReturn": "void",
            "nativeParams": {
                "hPC": "Pointer<IntPtr>"
            },
            "dartParams": {
                "hPC": "Pointer<IntPtr>"
            },
            "dllLibrary": "kernel32",
            "comment": "Closes a pseudoconsole from the given handle."
        },
        "CLSIDFromString": {
            "neutralApiName": "CLSIDFromString",
            "prototype": ["HRESULT CLSIDFromString(\\n  LPCOLESTR lpsz,\\n  LPCLSID   pclsid\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpsz": "Pointer<Utf16>",
                "pclsid": "Pointer<GUID>"
            },
            "dartParams": {
                "lpsz": "Pointer<Utf16>",
                "pclsid": "Pointer<GUID>"
            },
            "dllLibrary": "ole32",
            "comment": "Converts a string generated by the StringFromCLSID function back into the original CLSID."
        },
        "CoCreateGuid": {
            "neutralApiName": "CoCreateGuid",
            "prototype": ["HRESULT CoCreateGuid(\\n  GUID *pguid\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "pguid": "Pointer<GUID>"
            },
            "dartParams": {
                "pguid": "Pointer<GUID>"
            },
            "dllLibrary": "ole32",
            "comment": "Creates a GUID, a unique 128-bit integer used for CLSIDs and interface identifiers."
        },
        "CoCreateInstance": {
            "neutralApiName": "CoCreateInstance",
            "prototype": ["HRESULT CoCreateInstance(\\n  REFCLSID  rclsid,\\n  LPUNKNOWN pUnkOuter,\\n  DWORD     dwClsContext,\\n  REFIID    riid,\\n  LPVOID    *ppv\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "rclsid": "Pointer<GUID>",
                "pUnkOuter": "Pointer<IntPtr>",
                "dwClsContext": "Uint32",
                "riid": "Pointer<GUID>",
                "ppv": "Pointer<COMObject>"
            },
            "dartParams": {
                "rclsid": "Pointer<GUID>",
                "pUnkOuter": "Pointer<IntPtr>",
                "dwClsContext": "int",
                "riid": "Pointer<GUID>",
                "ppv": "Pointer<COMObject>"
            },
            "dllLibrary": "ole32",
            "comment": "Creates a single uninitialized object of the class associated with a specified CLSID. Call CoCreateInstance when you want to create only one object on the local system. To create a single object on a remote system, call the CoCreateInstanceEx function. To create multiple objects based on a single CLSID, call the CoGetClassObject function."
        },
        "CoGetClassObject": {
            "neutralApiName": "CoGetClassObject",
            "prototype": ["HRESULT CoGetClassObject(\\n  REFCLSID rclsid,\\n  DWORD    dwClsContext,\\n  LPVOID   pvReserved,\\n  REFIID   riid,\\n  LPVOID   *ppv\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "rclsid": "Pointer<GUID>",
                "dwClsContext": "Uint32",
                "pvReserved": "Pointer",
                "riid": "Pointer<GUID>",
                "ppv": "Pointer<COMObject>"
            },
            "dartParams": {
                "rclsid": "Pointer<GUID>",
                "dwClsContext": "int",
                "pvReserved": "Pointer",
                "riid": "Pointer<GUID>",
                "ppv": "Pointer<COMObject>"
            },
            "dllLibrary": "ole32",
            "comment": "Provides a pointer to an interface on a class object associated with a specified CLSID. CoGetClassObject locates, and if necessary, dynamically loads the executable code required to do this."
        },
        "CoInitializeEx": {
            "neutralApiName": "CoInitializeEx",
            "prototype": ["HRESULT CoInitializeEx(\\n  LPVOID pvReserved,\\n  DWORD  dwCoInit\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "pvReserved": "Pointer<Void>",
                "dwCoInit": "Uint32"
            },
            "dartParams": {
                "pvReserved": "Pointer<Void>",
                "dwCoInit": "int"
            },
            "dllLibrary": "ole32",
            "comment": "Initializes the COM library for use by the calling thread, sets the thread's concurrency model, and creates a new apartment for the thread if one is required."
        },
        "CoInitializeSecurity": {
            "neutralApiName": "CoInitializeSecurity",
            "prototype": ["HRESULT CoInitializeSecurity(\\n  PSECURITY_DESCRIPTOR        pSecDesc,\\n  LONG                        cAuthSvc,\\n  SOLE_AUTHENTICATION_SERVICE *asAuthSvc,\\n  void                        *pReserved1,\\n  DWORD                       dwAuthnLevel,\\n  DWORD                       dwImpLevel,\\n  void                        *pAuthList,\\n  DWORD                       dwCapabilities,\\n  void                        *pReserved3\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "pSecDesc": "Pointer<SECURITY_DESCRIPTOR>",
                "cAuthSvc": "Int32",
                "asAuthSvc": "Pointer<SOLE_AUTHENTICATION_SERVICE>",
                "pReserved1": "Pointer<Void>",
                "dwAuthnLevel": "Uint32",
                "dwImpLevel": "Uint32",
                "pAuthList": "Pointer<Void>",
                "dwCapabilities": "Uint32",
                "pReserved3": "Pointer<Void>"
            },
            "dartParams": {
                "pSecDesc": "Pointer<SECURITY_DESCRIPTOR>",
                "cAuthSvc": "int",
                "asAuthSvc": "Pointer<SOLE_AUTHENTICATION_SERVICE>",
                "pReserved1": "Pointer<Void>",
                "dwAuthnLevel": "int",
                "dwImpLevel": "int",
                "pAuthList": "Pointer<Void>",
                "dwCapabilities": "int",
                "pReserved3": "Pointer<Void>"
            },
            "dllLibrary": "ole32",
            "comment": "Registers security and sets the default security values for the process."
        },
        "CopyIcon": {
            "neutralApiName": "CopyIcon",
            "prototype": ["HICON CopyIcon(\\n  HICON hIcon\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hIcon": "IntPtr"
            },
            "dartParams": {
                "hIcon": "int"
            },
            "dllLibrary": "user32",
            "comment": "Copies the specified icon from another module to the current module."
        },
        "CoSetProxyBlanket": {
            "neutralApiName": "CoSetProxyBlanket",
            "prototype": ["HRESULT CoSetProxyBlanket(\\n  IUnknown                 *pProxy,\\n  DWORD                    dwAuthnSvc,\\n  DWORD                    dwAuthzSvc,\\n  OLECHAR                  *pServerPrincName,\\n  DWORD                    dwAuthnLevel,\\n  DWORD                    dwImpLevel,\\n  RPC_AUTH_IDENTITY_HANDLE pAuthInfo,\\n  DWORD                    dwCapabilities\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "pProxy": "Pointer",
                "dwAuthnSvc": "Uint32",
                "dwAuthzSvc": "Uint32",
                "pServerPrincName": "Pointer<Utf16>",
                "dwAuthnLevel": "Uint32",
                "dwImpLevel": "Uint32",
                "pAuthInfo": "Pointer<Void>",
                "dwCapabilities": "Uint32"
            },
            "dartParams": {
                "pProxy": "Pointer",
                "dwAuthnSvc": "int",
                "dwAuthzSvc": "int",
                "pServerPrincName": "Pointer<Utf16>",
                "dwAuthnLevel": "int",
                "dwImpLevel": "int",
                "pAuthInfo": "Pointer<Void>",
                "dwCapabilities": "int"
            },
            "dllLibrary": "ole32",
            "comment": "Sets the authentication information that will be used to make calls on the specified proxy. This is a helper function for IClientSecurity::SetBlanket."
        },
        "CoTaskMemFree": {
            "neutralApiName": "CoTaskMemFree",
            "prototype": ["void CoTaskMemFree(\\n  _Frees_ptr_opt_ LPVOID pv\\n);"],
            "nativeReturn": "Void",
            "dartReturn": "void",
            "nativeParams": {
                "pv": "Pointer"
            },
            "dartParams": {
                "pv": "Pointer"
            },
            "dllLibrary": "ole32",
            "comment": "Frees a block of task memory previously allocated through a call to the CoTaskMemAlloc or CoTaskMemRealloc function."
        },
        "CoUninitialize": {
            "neutralApiName": "CoUninitialize",
            "prototype": ["void CoUninitialize();"],
            "nativeReturn": "Void",
            "dartReturn": "void",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "ole32",
            "comment": "Closes the COM library on the current thread, unloads all DLLs loaded by the thread, frees any other resources that the thread maintains, and forces all RPC connections on the thread to close."
        },
        "CreateAcceleratorTableW": {
            "neutralApiName": "CreateAcceleratorTable",
            "prototype": ["HACCEL CreateAcceleratorTableW(\\n  LPACCEL paccel,\\n  int     cAccel\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "paccel": "Pointer",
                "cAccel": "Int32"
            },
            "dartParams": {
                "paccel": "Pointer",
                "cAccel": "int"
            },
            "dllLibrary": "user32",
            "comment": "Creates an accelerator table."
        },
        "CreateCompatibleBitmap": {
            "neutralApiName": "CreateCompatibleBitmap",
            "prototype": ["HBITMAP CreateCompatibleBitmap(\\n  HDC hdc,\\n  int cx,\\n  int cy\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "cx": "Int32",
                "cy": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "cx": "int",
                "cy": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The CreateCompatibleBitmap function creates a bitmap compatible with the device that is associated with the specified device context."
        },
        "CreateCompatibleDC": {
            "neutralApiName": "CreateCompatibleDC",
            "prototype": ["HDC CreateCompatibleDC(\\n  HDC hdc\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr"
            },
            "dartParams": {
                "hdc": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The CreateCompatibleDC function creates a memory device context (DC) compatible with the specified device."
        },
        "CreateConsoleScreenBuffer": {
            "neutralApiName": "CreateConsoleScreenBuffer",
            "prototype": ["HANDLE WINAPI CreateConsoleScreenBuffer(\\n  _In_Â Â Â Â Â Â Â Â Â Â Â Â Â DWORD Â Â Â Â Â Â Â Â Â Â Â Â Â Â dwDesiredAccess,\\n  _In_Â Â Â Â Â Â Â Â Â Â Â Â Â DWORD Â Â Â Â Â Â Â Â Â Â Â Â Â Â dwShareMode,\\n  _In_opt_Â Â Â const SECURITY_ATTRIBUTES *lpSecurityAttributes,\\n  _In_Â Â Â Â Â Â Â Â Â Â Â Â Â DWORD Â Â Â Â Â Â Â Â Â Â Â Â Â Â dwFlags,\\n  _Reserved_Â Â Â Â Â Â Â LPVOID Â Â Â Â Â Â Â Â Â Â Â Â Â lpScreenBufferData\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "dwDesiredAccess": "Uint32",
                "dwShareMode": "Uint32",
                "lpSecurityAttributes": "Pointer<SECURITY_ATTRIBUTES>",
                "dwFlags": "Uint32",
                "lpScreenBufferData": "Pointer"
            },
            "dartParams": {
                "dwDesiredAccess": "int",
                "dwShareMode": "int",
                "lpSecurityAttributes": "Pointer<SECURITY_ATTRIBUTES>",
                "dwFlags": "int",
                "lpScreenBufferData": "Pointer"
            },
            "dllLibrary": "kernel32",
            "comment": "Creates a console screen buffer."
        },
        "CreateDialogIndirectParamW": {
            "neutralApiName": "CreateDialogIndirectParam",
            "prototype": ["HWND CreateDialogIndirectParamW(\\n  HINSTANCE       hInstance,\\n  LPCDLGTEMPLATEW lpTemplate,\\n  HWND            hWndParent,\\n  DLGPROC         lpDialogFunc,\\n  LPARAM          dwInitParam\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hInstance": "IntPtr",
                "lpTemplate": "Pointer<DLGTEMPLATE>",
                "hWndParent": "IntPtr",
                "lpDialogFunc": "Pointer<NativeFunction>",
                "dwInitParam": "IntPtr"
            },
            "dartParams": {
                "hInstance": "int",
                "lpTemplate": "Pointer<DLGTEMPLATE>",
                "hWndParent": "int",
                "lpDialogFunc": "Pointer<NativeFunction>",
                "dwInitParam": "int"
            },
            "dllLibrary": "user32",
            "comment": "Creates a modeless dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the lParam parameter of the WM_INITDIALOG message. An application can use this value to initialize dialog box controls."
        },
        "CreateDIBitmap": {
            "neutralApiName": "CreateDIBitmap",
            "prototype": ["HBITMAP CreateDIBitmap(\\n  HDC                    hdc,\\n  const BITMAPINFOHEADER *pbmih,\\n  DWORD                  flInit,\\n  const VOID             *pjBits,\\n  const BITMAPINFO       *pbmi,\\n  UINT                   iUsage\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "pbmih": "Pointer<BITMAPINFOHEADER>",
                "flInit": "Uint32",
                "pjBits": "Pointer",
                "pbmi": "Pointer<BITMAPINFO>",
                "iUsage": "Uint32"
            },
            "dartParams": {
                "hdc": "int",
                "pbmih": "Pointer<BITMAPINFOHEADER>",
                "flInit": "int",
                "pjBits": "Pointer",
                "pbmi": "Pointer<BITMAPINFO>",
                "iUsage": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The CreateDIBitmap function creates a compatible bitmap (DDB) from a DIB and, optionally, sets the bitmap bits."
        },
        "CreateDIBPatternBrushPt": {
            "neutralApiName": "CreateDIBPatternBrushPt",
            "prototype": ["HBRUSH CreateDIBPatternBrushPt(\\n  const VOID *lpPackedDIB,\\n  UINT       iUsage\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "lpPackedDIB": "Pointer",
                "iUsage": "Uint32"
            },
            "dartParams": {
                "lpPackedDIB": "Pointer",
                "iUsage": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The CreateDIBPatternBrushPt function creates a logical brush that has the pattern specified by the device-independent bitmap (DIB)."
        },
        "CreateFileW": {
            "neutralApiName": "CreateFile",
            "prototype": ["HANDLE CreateFileW(\\n  LPCWSTR               lpFileName,\\n  DWORD                 dwDesiredAccess,\\n  DWORD                 dwShareMode,\\n  LPSECURITY_ATTRIBUTES lpSecurityAttributes,\\n  DWORD                 dwCreationDisposition,\\n  DWORD                 dwFlagsAndAttributes,\\n  HANDLE                hTemplateFile\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "lpFileName": "Pointer<Utf16>",
                "dwDesiredAccess": "Uint32",
                "dwShareMode": "Uint32",
                "lpSecurityAttributes": "Pointer<SECURITY_ATTRIBUTES>",
                "dwCreationDisposition": "Uint32",
                "dwFlagsAndAttributes": "Uint32",
                "hTemplateFile": "IntPtr"
            },
            "dartParams": {
                "lpFileName": "Pointer<Utf16>",
                "dwDesiredAccess": "int",
                "dwShareMode": "int",
                "lpSecurityAttributes": "Pointer<SECURITY_ATTRIBUTES>",
                "dwCreationDisposition": "int",
                "dwFlagsAndAttributes": "int",
                "hTemplateFile": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe. The function returns a handle that can be used to access the file or device for various types of I/O depending on the file or device and the flags and attributes specified."
        },
        "CreateFontIndirectW": {
            "neutralApiName": "CreateFontIndirect",
            "prototype": ["HFONT CreateFontIndirectW(\\n  const LOGFONTW *lplf\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "lplf": "Pointer<LOGFONT>"
            },
            "dartParams": {
                "lplf": "Pointer<LOGFONT>"
            },
            "dllLibrary": "gdi32",
            "comment": "The CreateFontIndirect function creates a logical font that has the specified characteristics. The font can subsequently be selected as the current font for any device context."
        },
        "CreateHalftonePalette": {
            "neutralApiName": "CreateHalftonePalette",
            "prototype": ["HPALETTE CreateHalftonePalette(\\n  HDC hdc\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr"
            },
            "dartParams": {
                "hdc": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The CreateHalftonePalette function creates a halftone palette for the specified device context (DC)."
        },
        "CreateHatchBrush": {
            "neutralApiName": "CreateHatchBrush",
            "prototype": ["HBRUSH CreateHatchBrush(\\n  int      iHatch,\\n  COLORREF color\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "iHatch": "Int32",
                "color": "Int32"
            },
            "dartParams": {
                "iHatch": "int",
                "color": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The CreateHatchBrush function creates a logical brush that has the specified hatch pattern and color."
        },
        "CreateMenu": {
            "neutralApiName": "CreateMenu",
            "prototype": ["HMENU CreateMenu();"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "user32",
            "comment": "Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem, AppendMenu, and InsertMenu functions."
        },
        "CreatePen": {
            "neutralApiName": "CreatePen",
            "prototype": ["HPEN CreatePen(\\n  int      iStyle,\\n  int      cWidth,\\n  COLORREF color\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "iStyle": "Int32",
                "cWidth": "Int32",
                "color": "Int32"
            },
            "dartParams": {
                "iStyle": "int",
                "cWidth": "int",
                "color": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The CreatePen function creates a logical pen that has the specified style, width, and color. The pen can subsequently be selected into a device context and used to draw lines and curves."
        },
        "CreatePipe": {
            "neutralApiName": "CreatePipe",
            "prototype": ["BOOL CreatePipe(\\n  PHANDLE               hReadPipe,\\n  PHANDLE               hWritePipe,\\n  LPSECURITY_ATTRIBUTES lpPipeAttributes,\\n  DWORD                 nSize\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hReadPipe": "Pointer<IntPtr>",
                "hWritePipe": "Pointer<IntPtr>",
                "lpPipeAttributes": "Pointer<SECURITY_ATTRIBUTES>",
                "nSize": "Uint32"
            },
            "dartParams": {
                "hReadPipe": "Pointer<IntPtr>",
                "hWritePipe": "Pointer<IntPtr>",
                "lpPipeAttributes": "Pointer<SECURITY_ATTRIBUTES>",
                "nSize": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Creates an anonymous pipe, and returns handles to the read and write ends of the pipe."
        },
        "CreateProcessW": {
            "neutralApiName": "CreateProcess",
            "prototype": ["BOOL CreateProcessW(\\n  LPCWSTR               lpApplicationName,\\n  LPWSTR                lpCommandLine,\\n  LPSECURITY_ATTRIBUTES lpProcessAttributes,\\n  LPSECURITY_ATTRIBUTES lpThreadAttributes,\\n  BOOL                  bInheritHandles,\\n  DWORD                 dwCreationFlags,\\n  LPVOID                lpEnvironment,\\n  LPCWSTR               lpCurrentDirectory,\\n  LPSTARTUPINFOW        lpStartupInfo,\\n  LPPROCESS_INFORMATION lpProcessInformation\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpApplicationName": "Pointer<Utf16>",
                "lpCommandLine": "Pointer<Utf16>",
                "lpProcessAttributes": "Pointer<SECURITY_ATTRIBUTES>",
                "lpThreadAttributes": "Pointer<SECURITY_ATTRIBUTES>",
                "bInheritHandles": "Int32",
                "dwCreationFlags": "Uint32",
                "lpEnvironment": "Pointer",
                "lpCurrentDirectory": "Pointer<Utf16>",
                "lpStartupInfo": "Pointer",
                "lpProcessInformation": "Pointer<PROCESS_INFORMATION>"
            },
            "dartParams": {
                "lpApplicationName": "Pointer<Utf16>",
                "lpCommandLine": "Pointer<Utf16>",
                "lpProcessAttributes": "Pointer<SECURITY_ATTRIBUTES>",
                "lpThreadAttributes": "Pointer<SECURITY_ATTRIBUTES>",
                "bInheritHandles": "int",
                "dwCreationFlags": "int",
                "lpEnvironment": "Pointer",
                "lpCurrentDirectory": "Pointer<Utf16>",
                "lpStartupInfo": "Pointer",
                "lpProcessInformation": "Pointer<PROCESS_INFORMATION>"
            },
            "dllLibrary": "kernel32",
            "comment": "Creates a new process and its primary thread. The new process runs in the security context of the calling process."
        },
        "CreatePseudoConsole": {
            "neutralApiName": "CreatePseudoConsole",
            "prototype": ["HRESULT WINAPI CreatePseudoConsole(\\n  _In_ COORD size,\\n  _In_ HANDLE hInput,\\n  _In_ HANDLE hOutput,\\n  _In_ DWORD dwFlags,\\n  _Out_ HPCON* phPC\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "size": "Int32",
                "hInput": "IntPtr",
                "hOutput": "IntPtr",
                "dwFlags": "Int32",
                "phPC": "Pointer<IntPtr>"
            },
            "dartParams": {
                "size": "int",
                "hInput": "int",
                "hOutput": "int",
                "dwFlags": "int",
                "phPC": "Pointer<IntPtr>"
            },
            "dllLibrary": "kernel32",
            "comment": "Creates a new pseudoconsole object for the calling process."
        },
        "CreateSolidBrush": {
            "neutralApiName": "CreateSolidBrush",
            "prototype": ["HBRUSH CreateSolidBrush(\\n  COLORREF color\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "color": "Int32"
            },
            "dartParams": {
                "color": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The CreateSolidBrush function creates a logical brush that has the specified solid color."
        },
        "CreateWindowExW": {
            "neutralApiName": "CreateWindowEx",
            "prototype": ["HWND CreateWindowExW(\\n  DWORD     dwExStyle,\\n  LPCWSTR   lpClassName,\\n  LPCWSTR   lpWindowName,\\n  DWORD     dwStyle,\\n  int       X,\\n  int       Y,\\n  int       nWidth,\\n  int       nHeight,\\n  HWND      hWndParent,\\n  HMENU     hMenu,\\n  HINSTANCE hInstance,\\n  LPVOID    lpParam\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "dwExStyle": "Uint32",
                "lpClassName": "Pointer<Utf16>",
                "lpWindowName": "Pointer<Utf16>",
                "dwStyle": "Uint32",
                "X": "Int32",
                "Y": "Int32",
                "nWidth": "Int32",
                "nHeight": "Int32",
                "hWndParent": "IntPtr",
                "hMenu": "IntPtr",
                "hInstance": "IntPtr",
                "lpParam": "Pointer<Void>"
            },
            "dartParams": {
                "dwExStyle": "int",
                "lpClassName": "Pointer<Utf16>",
                "lpWindowName": "Pointer<Utf16>",
                "dwStyle": "int",
                "X": "int",
                "Y": "int",
                "nWidth": "int",
                "nHeight": "int",
                "hWndParent": "int",
                "hMenu": "int",
                "hInstance": "int",
                "lpParam": "Pointer<Void>"
            },
            "dllLibrary": "user32",
            "comment": "Creates an overlapped, pop-up, or child window. It specifies the window class, window title, window style, and (optionally) the initial position and size of the window. The function also specifies the window's parent or owner, if any, and the window's menu."
        },
        "CredDeleteW": {
            "neutralApiName": "CredDelete",
            "prototype": ["BOOL CredDeleteW(\\n  LPCWSTR TargetName,\\n  DWORD   Type,\\n  DWORD   Flags\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "TargetName": "Pointer<Utf16>",
                "Type": "Uint32",
                "Flags": "Uint32"
            },
            "dartParams": {
                "TargetName": "Pointer<Utf16>",
                "Type": "int",
                "Flags": "int"
            },
            "dllLibrary": "advapi32",
            "comment": "The CredDelete function deletes a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled."
        },
        "CredFree": {
            "neutralApiName": "CredFree",
            "prototype": ["void CredFree(\\n  PVOID Buffer\\n);"],
            "nativeReturn": "Void",
            "dartReturn": "void",
            "nativeParams": {
                "Buffer": "Pointer"
            },
            "dartParams": {
                "Buffer": "Pointer"
            },
            "dllLibrary": "advapi32",
            "comment": "The CredFree function frees a buffer returned by any of the credentials management functions."
        },
        "CredReadW": {
            "neutralApiName": "CredRead",
            "prototype": ["BOOL CredReadW(\\n  LPCWSTR      TargetName,\\n  DWORD        Type,\\n  DWORD        Flags,\\n  PCREDENTIALW *Credential\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "TargetName": "Pointer<Utf16>",
                "Type": "Uint32",
                "Flags": "Uint32",
                "Credential": "Pointer<Pointer<CREDENTIAL>>"
            },
            "dartParams": {
                "TargetName": "Pointer<Utf16>",
                "Type": "int",
                "Flags": "int",
                "Credential": "Pointer<Pointer<CREDENTIAL>>"
            },
            "dllLibrary": "advapi32",
            "comment": "The CredRead function reads a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled."
        },
        "CredWriteW": {
            "neutralApiName": "CredWrite",
            "prototype": ["BOOL CredWriteW(\\n  PCREDENTIALW Credential,\\n  DWORD        Flags\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "Credential": "Pointer<CREDENTIAL>",
                "Flags": "Uint32"
            },
            "dartParams": {
                "Credential": "Pointer<CREDENTIAL>",
                "Flags": "int"
            },
            "dllLibrary": "advapi32",
            "comment": "The CredWrite function creates a new credential or modifies an existing credential in the user's credential set. The new credential is associated with the logon session of the current token. The token must not have the user's security identifier (SID) disabled."
        },
        "DeactivateActCtx": {
            "neutralApiName": "DeactivateActCtx",
            "prototype": ["BOOL DeactivateActCtx(\\n  DWORD     dwFlags,\\n  ULONG_PTR ulCookie\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "dwFlags": "Uint32",
                "ulCookie": "IntPtr"
            },
            "dartParams": {
                "dwFlags": "int",
                "ulCookie": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "The DeactivateActCtx function deactivates the activation context corresponding to the specified cookie."
        },
        "DefWindowProcW": {
            "neutralApiName": "DefWindowProc",
            "prototype": ["LRESULT LRESULT DefWindowProcW(\\n  HWND   hWnd,\\n  UINT   Msg,\\n  WPARAM wParam,\\n  LPARAM lParam\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "Msg": "Uint32",
                "wParam": "IntPtr",
                "lParam": "IntPtr"
            },
            "dartParams": {
                "hWnd": "int",
                "Msg": "int",
                "wParam": "int",
                "lParam": "int"
            },
            "dllLibrary": "user32",
            "comment": "Calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure."
        },
        "DeleteObject": {
            "neutralApiName": "DeleteObject",
            "prototype": ["BOOL DeleteObject(\\n  HGDIOBJ ho\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "ho": "IntPtr"
            },
            "dartParams": {
                "ho": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid."
        },
        "DestroyIcon": {
            "neutralApiName": "DestroyIcon",
            "prototype": ["BOOL DestroyIcon(\\n  HICON hIcon\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hIcon": "IntPtr"
            },
            "dartParams": {
                "hIcon": "int"
            },
            "dllLibrary": "user32",
            "comment": "Destroys an icon and frees any memory the icon occupied."
        },
        "DestroyPhysicalMonitor": {
            "neutralApiName": "DestroyPhysicalMonitor",
            "prototype": ["_BOOL DestroyPhysicalMonitor(\\n  HANDLE hMonitor\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr"
            },
            "dartParams": {
                "hMonitor": "int"
            },
            "dllLibrary": "dxva2",
            "comment": "Closes a handle to a physical monitor. Call this function to close a monitor handle obtained from the GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9 function."
        },
        "DestroyPhysicalMonitors": {
            "neutralApiName": "DestroyPhysicalMonitors",
            "prototype": ["_BOOL DestroyPhysicalMonitors(\\n  DWORD              dwPhysicalMonitorArraySize,\\n  LPPHYSICAL_MONITOR pPhysicalMonitorArray\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "dwPhysicalMonitorArraySize": "Uint32",
                "pPhysicalMonitorArray": "Pointer"
            },
            "dartParams": {
                "dwPhysicalMonitorArraySize": "int",
                "pPhysicalMonitorArray": "Pointer"
            },
            "dllLibrary": "dxva2",
            "comment": "Closes an array of physical monitor handles. Call this function to close an array of monitor handles obtained from the GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9 function."
        },
        "DestroyWindow": {
            "neutralApiName": "DestroyWindow",
            "prototype": ["BOOL DestroyWindow(\\n  HWND hWnd\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr"
            },
            "dartParams": {
                "hWnd": "int"
            },
            "dllLibrary": "user32",
            "comment": "Destroys the specified window. The function sends WM_DESTROY and WM_NCDESTROY messages to the window to deactivate it and remove the keyboard focus from it. The function also destroys the window's menu, flushes the thread message queue, destroys timers, removes clipboard ownership, and breaks the clipboard viewer chain (if the window is at the top of the viewer chain)."
        },
        "DialogBoxIndirectParamW": {
            "neutralApiName": "DialogBoxIndirectParam",
            "prototype": ["INT_PTR DialogBoxIndirectParamW(\\n  HINSTANCE       hInstance,\\n  LPCDLGTEMPLATEW hDialogTemplate,\\n  HWND            hWndParent,\\n  DLGPROC         lpDialogFunc,\\n  LPARAM          dwInitParam\\n)"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hInstance": "IntPtr",
                "hDialogTemplate": "Pointer<DLGTEMPLATE>",
                "hWndParent": "IntPtr",
                "lpDialogFunc": "Pointer<NativeFunction>",
                "dwInitParam": "IntPtr"
            },
            "dartParams": {
                "hInstance": "int",
                "hDialogTemplate": "Pointer<DLGTEMPLATE>",
                "hWndParent": "int",
                "lpDialogFunc": "Pointer<NativeFunction>",
                "dwInitParam": "int"
            },
            "dllLibrary": "user32",
            "comment": "Creates a modal dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the lParam parameter of the WM_INITDIALOG message. An application can use this value to initialize dialog box controls."
        },
        "DispatchMessageW": {
            "neutralApiName": "DispatchMessage",
            "prototype": ["LRESULT DispatchMessage(\\n  const MSG *lpMsg\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "lpMsg": "Pointer<MSG>"
            },
            "dartParams": {
                "lpMsg": "Pointer<MSG>"
            },
            "dllLibrary": "user32",
            "comment": "Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function."
        },
        "DrawEscape": {
            "neutralApiName": "DrawEscape",
            "prototype": ["int DrawEscape(\\n  HDC    hdc,\\n  int    iEscape,\\n  int    cjIn,\\n  LPCSTR lpIn\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "iEscape": "Int32",
                "cjIn": "Int32",
                "lpIn": "Pointer"
            },
            "dartParams": {
                "hdc": "int",
                "iEscape": "int",
                "cjIn": "int",
                "lpIn": "Pointer"
            },
            "dllLibrary": "gdi32",
            "comment": "The DrawEscape function provides drawing capabilities of the specified video display that are not directly available through the graphics device interface (GDI)."
        },
        "DrawIcon": {
            "neutralApiName": "DrawIcon",
            "prototype": ["BOOL DrawIcon(\\n  HDC   hDC,\\n  int   X,\\n  int   Y,\\n  HICON hIcon\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hDC": "IntPtr",
                "X": "Int32",
                "Y": "Int32",
                "hIcon": "IntPtr"
            },
            "dartParams": {
                "hDC": "int",
                "X": "int",
                "Y": "int",
                "hIcon": "int"
            },
            "dllLibrary": "user32",
            "comment": "Draws an icon or cursor into the specified device context."
        },
        "DrawStatusTextW": {
            "neutralApiName": "DrawStatusText",
            "prototype": ["void DrawStatusTextW(\\n  HDC     hDC,\\n  LPCRECT lprc,\\n  LPCWSTR pszText,\\n  UINT    uFlags\\n);"],
            "nativeReturn": "Void",
            "dartReturn": "void",
            "nativeParams": {
                "hdc": "IntPtr",
                "lprc": "Pointer<RECT>",
                "pszText": "Pointer<Utf16>",
                "uFlags": "Uint32"
            },
            "dartParams": {
                "hdc": "int",
                "lprc": "Pointer<RECT>",
                "pszText": "Pointer<Utf16>",
                "uFlags": "int"
            },
            "dllLibrary": "comctl32",
            "comment": "The DrawStatusText function draws the specified text in the style of a status window with borders."
        },
        "DrawTextW": {
            "neutralApiName": "DrawText",
            "prototype": ["int DrawTextW(\\n  HDC     hdc,\\n  LPCWSTR lpchText,\\n  int     cchText,\\n  LPRECT  lprc,\\n  UINT    format\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "lpchText": "Pointer<Utf16>",
                "cchText": "Int32",
                "lprc": "Pointer<RECT>",
                "format": "Uint32"
            },
            "dartParams": {
                "hdc": "int",
                "lpchText": "Pointer<Utf16>",
                "cchText": "int",
                "lprc": "Pointer<RECT>",
                "format": "int"
            },
            "dllLibrary": "user32",
            "comment": "The DrawText function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth)."
        },
        "Ellipse": {
            "neutralApiName": "Ellipse",
            "prototype": ["BOOL Ellipse(\\n  HDC hdc,\\n  int left,\\n  int top,\\n  int right,\\n  int bottom\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "left": "Int32",
                "top": "Int32",
                "right": "Int32",
                "bottom": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "left": "int",
                "top": "int",
                "right": "int",
                "bottom": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The Ellipse function draws an ellipse. The center of the ellipse is the center of the specified bounding rectangle. The ellipse is outlined by using the current pen and is filled by using the current brush."
        },
        "EnableMenuItem": {
            "neutralApiName": "EnableMenuItem",
            "prototype": ["BOOL EnableMenuItem(\\n  HMENU hMenu,\\n  UINT  uIDEnableItem,\\n  UINT  uEnable\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMenu": "IntPtr",
                "uIDEnableItem": "Uint32",
                "uEnable": "Uint32"
            },
            "dartParams": {
                "hMenu": "int",
                "uIDEnableItem": "int",
                "uEnable": "int"
            },
            "dllLibrary": "user32",
            "comment": "Enables, disables, or grays the specified menu item."
        },
        "EndDialog": {
            "neutralApiName": "EndDialog",
            "prototype": ["BOOL EndDialog(\\n  HWND    hDlg,\\n  INT_PTR nResult\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hDlg": "IntPtr",
                "nResult": "IntPtr"
            },
            "dartParams": {
                "hDlg": "int",
                "nResult": "int"
            },
            "dllLibrary": "user32",
            "comment": "Destroys a modal dialog box, causing the system to end any processing for the dialog box."
        },
        "EndPaint": {
            "neutralApiName": "EndPaint",
            "prototype": ["BOOL EndPaint(\\n  HWND              hWnd,\\n  const PAINTSTRUCT *lpPaint\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "lpPaint": "Pointer<PAINTSTRUCT>"
            },
            "dartParams": {
                "hWnd": "int",
                "lpPaint": "Pointer<PAINTSTRUCT>"
            },
            "dllLibrary": "user32",
            "comment": "The EndPaint function marks the end of painting in the specified window. This function is required for each call to the BeginPaint function, but only after painting is complete."
        },
        "EndPath": {
            "neutralApiName": "EndPath",
            "prototype": ["BOOL EndPath(\\n  HDC hdc\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr"
            },
            "dartParams": {
                "hdc": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The EndPath function closes a path bracket and selects the path defined by the bracket into the specified device context."
        },
        "EndUpdateResourceW": {
            "neutralApiName": "EndUpdateResource",
            "prototype": ["BOOL EndUpdateResourceW(\\n  HANDLE hUpdate,\\n  BOOL   fDiscard\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hUpdate": "IntPtr",
                "fDiscard": "Int32"
            },
            "dartParams": {
                "hUpdate": "int",
                "fDiscard": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Commits or discards changes made prior to a call to UpdateResource."
        },
        "EnumChildWindows": {
            "neutralApiName": "EnumChildWindows",
            "prototype": ["BOOL EnumChildWindows(\\n  HWND        hWndParent,\\n  WNDENUMPROC lpEnumFunc,\\n  LPARAM      lParam\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWndParent": "IntPtr",
                "lpEnumFunc": "Pointer<NativeFunction>",
                "lParam": "IntPtr"
            },
            "dartParams": {
                "hWndParent": "int",
                "lpEnumFunc": "Pointer<NativeFunction>",
                "lParam": "int"
            },
            "dllLibrary": "user32",
            "comment": "Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. EnumChildWindows continues until the last child window is enumerated or the callback function returns FALSE."
        },
        "EnumDisplayMonitors": {
            "neutralApiName": "EnumDisplayMonitors",
            "prototype": ["BOOL EnumDisplayMonitors(\\n  HDC             hdc,\\n  LPCRECT         lprcClip,\\n  MONITORENUMPROC lpfnEnum,\\n  LPARAM          dwData\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "lprcClip": "Pointer",
                "lpfnEnum": "Pointer<NativeFunction>",
                "dwData": "IntPtr"
            },
            "dartParams": {
                "hdc": "int",
                "lprcClip": "Pointer",
                "lpfnEnum": "Pointer<NativeFunction>",
                "dwData": "int"
            },
            "dllLibrary": "user32",
            "comment": "The EnumDisplayMonitors function enumerates display monitors (including invisible pseudo-monitors associated with the mirroring drivers) that intersect a region formed by the intersection of a specified clipping rectangle and the visible region of a device context. EnumDisplayMonitors calls an application-defined MonitorEnumProc callback function once for each monitor that is enumerated. Note that GetSystemMetrics (SM_CMONITORS) counts only the display monitors."
        },
        "EnumFontFamiliesExW": {
            "neutralApiName": "EnumFontFamiliesEx",
            "prototype": ["int EnumFontFamiliesExW(\\n  HDC           hdc,\\n  LPLOGFONTW    lpLogfont,\\n  FONTENUMPROCW lpProc,\\n  LPARAM        lParam,\\n  DWORD         dwFlags\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "lpLogFont": "Pointer<LOGFONT>",
                "lpProc": "Pointer<NativeFunction>",
                "lParam": "IntPtr",
                "dwFlags": "Uint32"
            },
            "dartParams": {
                "hdc": "int",
                "lpLogFont": "Pointer<LOGFONT>",
                "lpProc": "Pointer<NativeFunction>",
                "lParam": "int",
                "dwFlags": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The EnumFontFamiliesEx function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the LOGFONT structure. EnumFontFamiliesEx enumerates fonts based on typeface name, character set, or both."
        },
        "EnumProcesses": {
            "neutralApiName": "EnumProcesses",
            "prototype": ["BOOL EnumProcesses(\\n  DWORD   *lpidProcess,\\n  DWORD   cb,\\n  LPDWORD lpcbNeeded\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpidProcess": "Pointer<Uint32>",
                "cb": "Uint32",
                "lpcbNeeded": "Pointer<Uint32>"
            },
            "dartParams": {
                "lpidProcess": "Pointer<Uint32>",
                "cb": "int",
                "lpcbNeeded": "Pointer<Uint32>"
            },
            "dllLibrary": "psapi",
            "comment": "Retrieves the process identifier for each process object in the system."
        },
        "EnumProcessModules": {
            "neutralApiName": "EnumProcessModules",
            "prototype": ["BOOL EnumProcessModules(\\n  HANDLE  hProcess,\\n  HMODULE *lphModule,\\n  DWORD   cb,\\n  LPDWORD lpcbNeeded\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hProcess": "IntPtr",
                "lphModule": "Pointer<IntPtr>",
                "cb": "Uint32",
                "lpcbNeeded": "Pointer<Uint32>"
            },
            "dartParams": {
                "hProcess": "int",
                "lphModule": "Pointer<IntPtr>",
                "cb": "int",
                "lpcbNeeded": "Pointer<Uint32>"
            },
            "dllLibrary": "psapi",
            "comment": "Retrieves a handle for each module in the specified process."
        },
        "EnumProcessModulesEx": {
            "neutralApiName": "EnumProcessModulesEx",
            "prototype": ["BOOL EnumProcessModulesEx(\\n  HANDLE  hProcess,\\n  HMODULE *lphModule,\\n  DWORD   cb,\\n  LPDWORD lpcbNeeded,\\n  DWORD   dwFilterFlag\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hProcess": "IntPtr",
                "lphModule": "Pointer<IntPtr>",
                "cb": "Uint32",
                "lpcbNeeded": "Pointer<Uint32>",
                "dwFilterFlag": "Uint32"
            },
            "dartParams": {
                "hProcess": "int",
                "lphModule": "Pointer<IntPtr>",
                "cb": "int",
                "lpcbNeeded": "Pointer<Uint32>",
                "dwFilterFlag": "int"
            },
            "dllLibrary": "psapi",
            "comment": "Retrieves a handle for each module in the specified process that meets the specified filter criteria."
        },
        "EnumResourceNamesW": {
            "neutralApiName": "EnumResourceNames",
            "prototype": ["BOOL EnumResourceNamesW(\\n  HMODULE          hModule,\\n  LPCWSTR          lpType,\\n  ENUMRESNAMEPROCW lpEnumFunc,\\n  LONG_PTR         lParam\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hModule": "IntPtr",
                "lpType": "Pointer<Utf16>",
                "lpEnumFunc": "Pointer<NativeFunction>",
                "lParam": "IntPtr"
            },
            "dartParams": {
                "hModule": "int",
                "lpType": "Pointer<Utf16>",
                "lpEnumFunc": "Pointer<NativeFunction>",
                "lParam": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Enumerates resources of a specified type within a binary module. For Windows Vista and later, this is typically a language-neutral Portable Executable (LN file), and the enumeration will also include resources from the corresponding language-specific resource files (.mui files) that contain localizable language resources. It is also possible for hModule to specify an .mui file, in which case only that file is searched for resources."
        },
        "EnumResourceTypesW": {
            "neutralApiName": "EnumResourceTypes",
            "prototype": ["BOOL EnumResourceTypesW(\\n  HMODULE          hModule,\\n  ENUMRESTYPEPROCW lpEnumFunc,\\n  LONG_PTR         lParam\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hModule": "IntPtr",
                "lpEnumFunc": "Pointer<NativeFunction>",
                "lParam": "IntPtr"
            },
            "dartParams": {
                "hModule": "int",
                "lpEnumFunc": "Pointer<NativeFunction>",
                "lParam": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Enumerates resource types within a binary module. Starting with Windows Vista, this is typically a language-neutral Portable Executable (LN file), and the enumeration also includes resources from one of the corresponding language-specific resource files (.mui files)âif one existsâthat contain localizable language resources. It is also possible to use hModule to specify a .mui file, in which case only that file is searched for resource types."
        },
        "EnumWindows": {
            "neutralApiName": "EnumWindows",
            "prototype": ["BOOL EnumWindows(\\n  WNDENUMPROC lpEnumFunc,\\n  LPARAM      lParam\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpEnumFunc": "Pointer<NativeFunction>",
                "lParam": "IntPtr"
            },
            "dartParams": {
                "lpEnumFunc": "Pointer<NativeFunction>",
                "lParam": "int"
            },
            "dllLibrary": "user32",
            "comment": "Enumerates all top-level windows on the screen by passing the handle to each window, in turn, to an application-defined callback function. EnumWindows continues until the last top-level window is enumerated or the callback function returns FALSE."
        },
        "ExtCreatePen": {
            "neutralApiName": "ExtCreatePen",
            "prototype": ["HPEN ExtCreatePen(\\n  DWORD          iPenStyle,\\n  DWORD          cWidth,\\n  const LOGBRUSH *plbrush,\\n  DWORD          cStyle,\\n  const DWORD    *pstyle\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "iPenStyle": "Uint32",
                "cWidth": "Uint32",
                "plBrush": "Pointer<LOGFONT>",
                "cStyle": "Uint32",
                "pStyle": "Pointer<Uint32>"
            },
            "dartParams": {
                "iPenStyle": "int",
                "cWidth": "int",
                "plBrush": "Pointer<LOGFONT>",
                "cStyle": "int",
                "pStyle": "Pointer<Uint32>"
            },
            "dllLibrary": "gdi32",
            "comment": "The ExtCreatePen function creates a logical cosmetic or geometric pen that has the specified style, width, and brush attributes."
        },
        "ExtTextOutW": {
            "neutralApiName": "ExtTextOut",
            "prototype": ["BOOL ExtTextOutW(\\n  HDC        hdc,\\n  int        x,\\n  int        y,\\n  UINT       options,\\n  const RECT *lprect,\\n  LPCWSTR    lpString,\\n  UINT       c,\\n  const INT  *lpDx\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "x": "Int32",
                "y": "Int32",
                "options": "Uint32",
                "lprect": "Pointer<RECT>",
                "lpString": "Pointer<Utf16>",
                "c": "Uint32",
                "lpDx": "Pointer<Int32>"
            },
            "dartParams": {
                "hdc": "int",
                "x": "int",
                "y": "int",
                "options": "int",
                "lprect": "Pointer<RECT>",
                "lpString": "Pointer<Utf16>",
                "c": "int",
                "lpDx": "Pointer<Int32>"
            },
            "dllLibrary": "gdi32",
            "comment": "The ExtTextOut function draws text using the currently selected font, background color, and text color. You can optionally provide dimensions to be used for clipping, opaquing, or both."
        },
        "FillConsoleOutputAttribute": {
            "neutralApiName": "FillConsoleOutputAttribute",
            "prototype": ["BOOL WINAPI FillConsoleOutputAttribute(\\n  _In_  HANDLE  hConsoleOutput,\\n  _In_  WORD    wAttribute,\\n  _In_  DWORD   nLength,\\n  _In_  COORD   dwWriteCoord,\\n  _Out_ LPDWORD lpNumberOfAttrsWritten\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hConsoleOutput": "IntPtr",
                "wAttribute": "Uint16",
                "nLength": "Uint32",
                "dwWriteCoord": "Int32",
                "lpNumberOfAttrsWritten": "Pointer<Uint32>"
            },
            "dartParams": {
                "hConsoleOutput": "int",
                "wAttribute": "int",
                "nLength": "int",
                "dwWriteCoord": "int",
                "lpNumberOfAttrsWritten": "Pointer<Uint32>"
            },
            "dllLibrary": "kernel32",
            "comment": "Sets the character attributes for a specified number of character cells, beginning at the specified coordinates in a screen buffer."
        },
        "FillConsoleOutputCharacterW": {
            "neutralApiName": "FillConsoleOutputCharacter",
            "prototype": ["BOOL WINAPI FillConsoleOutputCharacter(\\n  _In_  HANDLE  hConsoleOutput,\\n  _In_  TCHAR   cCharacter,\\n  _In_  DWORD   nLength,\\n  _In_  COORD   dwWriteCoord,\\n  _Out_ LPDWORD lpNumberOfCharsWritten\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hConsoleOutput": "IntPtr",
                "cCharacter": "Uint8",
                "nLength": "Uint32",
                "dwWriteCoord": "Int32",
                "lpNumberOfCharsWritten": "Pointer<Uint32>"
            },
            "dartParams": {
                "hConsoleOutput": "int",
                "cCharacter": "int",
                "nLength": "int",
                "dwWriteCoord": "int",
                "lpNumberOfCharsWritten": "Pointer<Uint32>"
            },
            "dllLibrary": "kernel32",
            "comment": "Writes a character to the console screen buffer a specified number of times, beginning at the specified coordinates."
        },
        "FillRect": {
            "neutralApiName": "FillRect",
            "prototype": ["int FillRect(\\n  HDC        hDC,\\n  const RECT *lprc,\\n  HBRUSH     hbr\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hDC": "IntPtr",
                "lprc": "Pointer<RECT>",
                "hbr": "IntPtr"
            },
            "dartParams": {
                "hDC": "int",
                "lprc": "Pointer<RECT>",
                "hbr": "int"
            },
            "dllLibrary": "user32",
            "comment": "The FillRect function fills a rectangle by using the specified brush. This function includes the left and top borders, but excludes the right and bottom borders of the rectangle."
        },
        "FindExecutableW": {
            "neutralApiName": "FindExecutable",
            "prototype": ["HINSTANCE FindExecutableW(\\n  LPCWSTR lpFile,\\n  LPCWSTR lpDirectory,\\n  LPWSTR  lpResult\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "lpFile": "Pointer<Utf16>",
                "lpDirectory": "Pointer<Utf16>",
                "lpResult": "Pointer<Utf16>"
            },
            "dartParams": {
                "lpFile": "Pointer<Utf16>",
                "lpDirectory": "Pointer<Utf16>",
                "lpResult": "Pointer<Utf16>"
            },
            "dllLibrary": "shell32",
            "comment": "Retrieves the name of and handle to the executable (.exe) file associated with a specific document file."
        },
        "FindFirstVolumeW": {
            "neutralApiName": "FindFirstVolume",
            "prototype": ["HANDLE FindFirstVolumeW(\\n  LPWSTR lpszVolumeName,\\n  DWORD  cchBufferLength\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "lpszVolumeName": "Pointer<Utf16>",
                "cchBufferLength": "Uint32"
            },
            "dartParams": {
                "lpszVolumeName": "Pointer<Utf16>",
                "cchBufferLength": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves the name of a volume on a computer. FindFirstVolume is used to begin scanning the volumes of a computer."
        },
        "FindNextVolumeW": {
            "neutralApiName": "FindNextVolume",
            "prototype": ["BOOL FindNextVolumeW(\\n  HANDLE hFindVolume,\\n  LPWSTR lpszVolumeName,\\n  DWORD  cchBufferLength\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hFindVolume": "IntPtr",
                "lpszVolumeName": "Pointer<Utf16>",
                "cchBufferLength": "Uint32"
            },
            "dartParams": {
                "hFindVolume": "int",
                "lpszVolumeName": "Pointer<Utf16>",
                "cchBufferLength": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Continues a volume search started by a call to the FindFirstVolume function. FindNextVolume finds one volume per call."
        },
        "FindResourceW": {
            "neutralApiName": "FindResource",
            "prototype": ["HRSRC FindResourceW(\\n  HMODULE hModule,\\n  LPCWSTR  lpName,\\n  LPCWSTR  lpType\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hModule": "IntPtr",
                "lpName": "Pointer<Utf16>",
                "lpType": "Pointer<Utf16>"
            },
            "dartParams": {
                "hModule": "int",
                "lpName": "Pointer<Utf16>",
                "lpType": "Pointer<Utf16>"
            },
            "dllLibrary": "kernel32",
            "comment": "Determines the location of a resource with the specified type and name in the specified module."
        },
        "FindResourceExW": {
            "neutralApiName": "FindResourceEx",
            "prototype": ["HRSRC FindResourceExW(\\n  HMODULE hModule,\\n  LPCWSTR  lpType,\\n  LPCWSTR  lpName,\\n  WORD    wLanguage\\n););"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hModule": "IntPtr",
                "lpName": "Pointer<Utf16>",
                "lpType": "Pointer<Utf16>",
                "wLanguage": "Int16"
            },
            "dartParams": {
                "hModule": "int",
                "lpName": "Pointer<Utf16>",
                "lpType": "Pointer<Utf16>",
                "wLanguage": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Determines the location of the resource with the specified type, name, and language in the specified module."
        },
        "FindTextW": {
            "neutralApiName": "FindText",
            "prototype": ["HWND FindTextW(\\n  LPFINDREPLACEW Arg1\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "Arg1": "Pointer<FINDREPLACE>"
            },
            "dartParams": {
                "Arg1": "Pointer<FINDREPLACE>"
            },
            "dllLibrary": "comdlg32",
            "comment": "Creates a system-defined modeless Find dialog box that lets the user specify a string to search for and options to use when searching for text in a document."
        },
        "FindVolumeClose": {
            "neutralApiName": "FindVolumeClose",
            "prototype": ["BOOL FindVolumeClose(\\n  HANDLE hFindVolume\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hFindVolume": "IntPtr"
            },
            "dartParams": {
                "hFindVolume": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Closes the specified volume search handle. The FindFirstVolume and FindNextVolume functions use this search handle to locate volumes."
        },
        "FindWindowExW": {
            "neutralApiName": "FindWindowEx",
            "prototype": ["HWND FindWindowExW(\\n  HWND    hWndParent,\\n  HWND    hWndChildAfter,\\n  LPCWSTR lpszClass,\\n  LPCWSTR lpszWindow\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hWndParent": "IntPtr",
                "hWndChildAfter": "IntPtr",
                "lpszClass": "Pointer<Utf16>",
                "lpszWindow": "Pointer<Utf16>"
            },
            "dartParams": {
                "hWndParent": "int",
                "hWndChildAfter": "int",
                "lpszClass": "Pointer<Utf16>",
                "lpszWindow": "Pointer<Utf16>"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search."
        },
        "FlushConsoleInputBuffer": {
            "neutralApiName": "FlushConsoleInputBuffer",
            "prototype": ["BOOL WINAPI FlushConsoleInputBuffer(\\n  _In_Â HANDLE hConsoleInput\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hConsoleInput": "IntPtr"
            },
            "dartParams": {
                "hConsoleInput": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Flushes the console input buffer. All input records currently in the input buffer are discarded."
        },
        "FormatMessageW": {
            "neutralApiName": "FormatMessage",
            "prototype": ["DWORD FormatMessageW(\\n  DWORD   dwFlags,\\n  LPCVOID lpSource,\\n  DWORD   dwMessageId,\\n  DWORD   dwLanguageId,\\n  LPWSTR  lpBuffer,\\n  DWORD   nSize,\\n  va_list *Arguments\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "dwFlags": "Uint32",
                "lpSource": "Pointer<Void>",
                "dwMessageId": "Uint32",
                "dwLanguageId": "Uint32",
                "lpBuffer": "Pointer<Utf16>",
                "nSize": "Uint32",
                "arguments": "Pointer"
            },
            "dartParams": {
                "dwFlags": "int",
                "lpSource": "Pointer<Void>",
                "dwMessageId": "int",
                "dwLanguageId": "int",
                "lpBuffer": "Pointer<Utf16>",
                "nSize": "int",
                "arguments": "Pointer"
            },
            "dllLibrary": "kernel32",
            "comment": "Formats a message string. The function requires a message definition as input. The message definition can come from a buffer passed into the function. It can come from a message table resource in an already-loaded module. Or the caller can ask the function to search the system's message table resource(s) for the message definition. The function finds the message definition in a message table resource based on a message identifier and a language identifier. The function copies the formatted message text to an output buffer, processing any embedded insert sequences if requested."
        },
        "FreeConsole": {
            "neutralApiName": "FreeConsole",
            "prototype": ["BOOL WINAPI FreeConsole(void);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "kernel32",
            "comment": "Detaches the calling process from its console."
        },
        "FreeLibrary": {
            "neutralApiName": "FreeLibrary",
            "prototype": ["BOOL FreeLibrary(\\n  HMODULE hLibModule\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hLibModule": "IntPtr"
            },
            "dartParams": {
                "hLibModule": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count. When the reference count reaches zero, the module is unloaded from the address space of the calling process and the handle is no longer valid."
        },
        "GetClientRect": {
            "neutralApiName": "GetClientRect",
            "prototype": ["BOOL GetClientRect(\\n  HWND   hWnd,\\n  LPRECT lpRect\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hwnd": "IntPtr",
                "lpRect": "Pointer<RECT>"
            },
            "dartParams": {
                "hwnd": "int",
                "lpRect": "Pointer<RECT>"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves the coordinates of a window's client area. The client coordinates specify the upper-left and lower-right corners of the client area. Because client coordinates are relative to the upper-left corner of a window's client area, the coordinates of the upper-left corner are (0,0)."
        },
        "GetComputerNameExW": {
            "neutralApiName": "GetComputerNameEx",
            "prototype": ["BOOL GetComputerNameExW(\\n  COMPUTER_NAME_FORMAT NameType,\\n  LPWSTR               lpBuffer,\\n  LPDWORD              nSize\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "NameType": "Int32",
                "lpBuffer": "Pointer<Utf16>",
                "nSize": "Pointer<Uint32>"
            },
            "dartParams": {
                "NameType": "int",
                "lpBuffer": "Pointer<Utf16>",
                "nSize": "Pointer<Uint32>"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves a NetBIOS or DNS name associated with the local computer. The names are established at system startup, when the system reads them from the registry."
        },
        "GetConsoleCursorInfo": {
            "neutralApiName": "GetConsoleCursorInfo",
            "prototype": ["BOOL WINAPI GetConsoleCursorInfo(\\n  _In_  HANDLE               hConsoleOutput,\\n  _Out_ PCONSOLE_CURSOR_INFO lpConsoleCursorInfo\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hConsoleOutput": "IntPtr",
                "lpConsoleCursorInfo": "Pointer<CONSOLE_CURSOR_INFO>"
            },
            "dartParams": {
                "hConsoleOutput": "int",
                "lpConsoleCursorInfo": "Pointer<CONSOLE_CURSOR_INFO>"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves information about the size and visibility of the cursor for the specified console screen buffer."
        },
        "GetConsoleMode": {
            "neutralApiName": "GetConsoleMode",
            "prototype": ["BOOL WINAPI GetConsoleMode(\\n  _In_  HANDLE  hConsoleHandle,\\n  _Out_ LPDWORD lpMode\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hConsoleHandle": "IntPtr",
                "lpMode": "Pointer<Uint32>"
            },
            "dartParams": {
                "hConsoleHandle": "int",
                "lpMode": "Pointer<Uint32>"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves the current input mode of a console's input buffer or the current output mode of a console screen buffer."
        },
        "GetConsoleScreenBufferInfo": {
            "neutralApiName": "GetConsoleScreenBufferInfo",
            "prototype": ["BOOL WINAPI GetConsoleScreenBufferInfo(\\n  _In_  HANDLE                      hConsoleOutput,\\n  _Out_ PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hConsoleOutput": "IntPtr",
                "lpConsoleScreenBufferInfo": "Pointer<CONSOLE_SCREEN_BUFFER_INFO>"
            },
            "dartParams": {
                "hConsoleOutput": "int",
                "lpConsoleScreenBufferInfo": "Pointer<CONSOLE_SCREEN_BUFFER_INFO>"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves information about the specified console screen buffer."
        },
        "GetConsoleSelectionInfo": {
            "neutralApiName": "GetConsoleSelectionInfo",
            "prototype": ["BOOL WINAPI GetConsoleSelectionInfo(\\n  _Out_ PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpConsoleSelectionInfo": "Pointer<CONSOLE_SELECTION_INFO>"
            },
            "dartParams": {
                "lpConsoleSelectionInfo": "Pointer<CONSOLE_SELECTION_INFO>"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves information about the current console selection."
        },
        "GetConsoleTitleW": {
            "neutralApiName": "GetConsoleTitle",
            "prototype": ["DWORD WINAPI GetConsoleTitle(\\n  _Out_ LPTSTR lpConsoleTitle,\\n  _In_  DWORD  nSize\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "lpConsoleTitle": "Pointer<Utf16>",
                "nSize": "Uint32"
            },
            "dartParams": {
                "lpConsoleTitle": "Pointer<Utf16>",
                "nSize": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves the title for the current console window."
        },
        "GetConsoleWindow": {
            "neutralApiName": "GetConsoleWindow",
            "prototype": ["HWND WINAPI GetConsoleWindow(void);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "kernel32",
            "comment": "Retrieves the window handle used by the console associated with the calling process."
        },
        "GetCurrentProcess": {
            "neutralApiName": "GetCurrentProcess",
            "prototype": ["HANDLE GetCurrentProcess();"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "kernel32",
            "comment": "Retrieves a pseudo handle for the current process."
        },
        "GetCursor": {
            "neutralApiName": "GetCursor",
            "prototype": ["HCURSOR GetCursor();"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "user32",
            "comment": "Retrieves a handle to the current cursor."
        },
        "GetCursorPos": {
            "neutralApiName": "GetCursorPos",
            "prototype": ["BOOL GetCursorPos(\\n  LPPOINT lpPoint\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpPoint": "Pointer<POINT>"
            },
            "dartParams": {
                "lpPoint": "Pointer<POINT>"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves the position of the mouse cursor, in screen coordinates."
        },
        "GetDC": {
            "neutralApiName": "GetDC",
            "prototype": ["HDC GetDC(\\n  HWND hWnd\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hwnd": "IntPtr"
            },
            "dartParams": {
                "hwnd": "int"
            },
            "dllLibrary": "user32",
            "comment": "The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw in the DC. The device context is an opaque data structure, whose values are used internally by GDI."
        },
        "GetDialogBaseUnits": {
            "neutralApiName": "GetDialogBaseUnits",
            "prototype": ["long GetDialogBaseUnits();"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "user32",
            "comment": "Retrieves the system's dialog base units, which are the average width and height of characters in the system font. For dialog boxes that use the system font, you can use these values to convert between dialog template units, as specified in dialog box templates, and pixels. For dialog boxes that do not use the system font, the conversion from dialog template units to pixels depends on the font used by the dialog box."
        },
        "GetDIBits": {
            "neutralApiName": "GetDIBits",
            "prototype": ["int GetDIBits(\\n  HDC          hdc,\\n  HBITMAP      hbm,\\n  UINT         start,\\n  UINT         cLines,\\n  LPVOID       lpvBits,\\n  LPBITMAPINFO lpbmi,\\n  UINT         usage\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "hbm": "IntPtr",
                "start": "Uint32",
                "cLines": "Uint32",
                "lpvBits": "Pointer",
                "lpbmi": "Pointer<BITMAPINFO>",
                "usage": "Uint32"
            },
            "dartParams": {
                "hdc": "int",
                "hbm": "int",
                "start": "int",
                "cLines": "int",
                "lpvBits": "Pointer",
                "lpbmi": "Pointer<BITMAPINFO>",
                "usage": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The GetDIBits function retrieves the bits of the specified compatible bitmap and copies them into a buffer as a DIB using the specified format."
        },
        "GetDlgItem": {
            "neutralApiName": "GetDlgItem",
            "prototype": ["HWND GetDlgItem(\\n  HWND hDlg,\\n  int  nIDDlgItem\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hDlg": "IntPtr",
                "nIDDlgItem": "Int32"
            },
            "dartParams": {
                "hDlg": "int",
                "nIDDlgItem": "int"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves a handle to a control in the specified dialog box."
        },
        "GetDlgItemInt": {
            "neutralApiName": "GetDlgItemInt",
            "prototype": ["UINT GetDlgItemInt(\\n  HWND hDlg,\\n  int  nIDDlgItem,\\n  BOOL *lpTranslated,\\n  BOOL bSigned\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "hDlg": "IntPtr",
                "nIDDlgItem": "Int32",
                "lpTranslated": "Pointer<Int32>",
                "bSigned": "Int32"
            },
            "dartParams": {
                "hDlg": "int",
                "nIDDlgItem": "int",
                "lpTranslated": "Pointer<Int32>",
                "bSigned": "int"
            },
            "dllLibrary": "user32",
            "comment": "Translates the text of a specified control in a dialog box into an integer value."
        },
        "GetDlgItemTextW": {
            "neutralApiName": "GetDlgItemText",
            "prototype": ["UINT GetDlgItemTextW(\\n  HWND   hDlg,\\n  int    nIDDlgItem,\\n  LPWSTR lpString,\\n  int    cchMax\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "hDlg": "IntPtr",
                "nIDDlgItem": "Int32",
                "lpString": "Pointer<Utf16>",
                "cchMax": "Int32"
            },
            "dartParams": {
                "hDlg": "int",
                "nIDDlgItem": "int",
                "lpString": "Pointer<Utf16>",
                "cchMax": "int"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves the title or text associated with a control in a dialog box."
        },
        "GetDpiForMonitor": {
            "neutralApiName": "GetDpiForMonitor",
            "prototype": ["HRESULT GetDpiForMonitor(\\n  HMONITOR         hmonitor,\\n  MONITOR_DPI_TYPE dpiType,\\n  UINT             *dpiX,\\n  UINT             *dpiY\\n  );"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "dpiType": "Int32",
                "dpiX": "Pointer<Int32>",
                "dpiY": "Pointer<Int32>"
            },
            "dartParams": {
                "hMonitor": "int",
                "dpiType": "int",
                "dpiX": "Pointer<Int32>",
                "dpiY": "Pointer<Int32>"
            },
            "dllLibrary": "shcore",
            "comment": "Queries the dots per inch (dpi) of a display."
        },
        "GetDpiForSystem": {
            "neutralApiName": "GetDpiForSystem",
            "prototype": ["UINT GetDpiForSystem();"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "user32",
            "comment": "Returns the system DPI."
        },
        "GetDpiForWindow": {
            "neutralApiName": "GetDpiForWindow",
            "prototype": ["UINT GetDpiForWindow(\\n  HWND hwnd\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hwnd": "IntPtr"
            },
            "dartParams": {
                "hwnd": "int"
            },
            "dllLibrary": "user32",
            "comment": "Returns the dots per inch (dpi) value for the associated window."
        },
        "GetFileVersionInfoExW": {
            "neutralApiName": "GetFileVersionInfoEx",
            "prototype": ["BOOL GetFileVersionInfoExW(\\n  DWORD   dwFlags,\\n  LPCWSTR lpwstrFilename,\\n  DWORD   dwHandle,\\n  DWORD   dwLen,\\n  LPVOID  lpData\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "dwFlags": "Uint32",
                "lpwstrFilename": "Pointer<Utf16>",
                "dwHandle": "Uint32",
                "dwLen": "Uint32",
                "lpData": "Pointer"
            },
            "dartParams": {
                "dwFlags": "int",
                "lpwstrFilename": "Pointer<Utf16>",
                "dwHandle": "int",
                "dwLen": "int",
                "lpData": "Pointer"
            },
            "dllLibrary": "version",
            "comment": "Retrieves version information for the specified file."
        },
        "GetFileVersionInfoSizeExW": {
            "neutralApiName": "GetFileVersionInfoSizeEx",
            "prototype": ["DWORD GetFileVersionInfoSizeExW(\\n  DWORD   dwFlags,\\n  LPCWSTR lpwstrFilename,\\n  LPDWORD lpdwHandle\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "dwFlags": "Uint32",
                "lpwstrFilename": "Pointer<Utf16>",
                "lpdwHandle": "Pointer<Uint32>"
            },
            "dartParams": {
                "dwFlags": "int",
                "lpwstrFilename": "Pointer<Utf16>",
                "lpdwHandle": "Pointer<Uint32>"
            },
            "dllLibrary": "version",
            "comment": "Determines whether the operating system can retrieve version information for a specified file. If version information is available, GetFileVersionInfoSizeEx returns the size, in bytes, of that information."
        },
        "GetFileVersionInfoSizeW": {
            "neutralApiName": "GetFileVersionInfoSize",
            "prototype": ["DWORD GetFileVersionInfoSizeW(\\n  LPCWSTR lptstrFilename,\\n  LPDWORD lpdwHandle\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "lptstrFilename": "Pointer<Utf16>",
                "lpdwHandle": "Pointer<Uint32>"
            },
            "dartParams": {
                "lptstrFilename": "Pointer<Utf16>",
                "lpdwHandle": "Pointer<Uint32>"
            },
            "dllLibrary": "version",
            "comment": "Determines whether the operating system can retrieve version information for a specified file. If version information is available, GetFileVersionInfoSize returns the size, in bytes, of that information."
        },
        "GetFileVersionInfoW": {
            "neutralApiName": "GetFileVersionInfo",
            "prototype": ["BOOL GetFileVersionInfoW(\\n  LPCWSTR lptstrFilename,\\n  DWORD   dwHandle,\\n  DWORD   dwLen,\\n  LPVOID  lpData\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lptstrFilename": "Pointer<Utf16>",
                "dwHandle": "Uint32",
                "dwLen": "Uint32",
                "lpData": "Pointer"
            },
            "dartParams": {
                "lptstrFilename": "Pointer<Utf16>",
                "dwHandle": "int",
                "dwLen": "int",
                "lpData": "Pointer"
            },
            "dllLibrary": "version",
            "comment": "Retrieves version information for the specified file."
        },
        "GetForegroundWindow": {
            "neutralApiName": "GetForegroundWindow",
            "prototype": ["HWND GetForegroundWindow();"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "user32",
            "comment": "Retrieves a handle to the foreground window (the window with which the user is currently working). The system assigns a slightly higher priority to the thread that creates the foreground window than it does to other threads."
        },
        "GetLargestConsoleWindowSize": {
            "neutralApiName": "GetLargestConsoleWindowSize",
            "prototype": ["COORD WINAPI GetLargestConsoleWindowSize(\\n  _In_Â HANDLE hConsoleOutput\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hConsoleOutput": "IntPtr"
            },
            "dartParams": {
                "hConsoleOutput": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves the size of the largest possible console window, based on the current font and the size of the display."
        },
        "GetLastError": {
            "neutralApiName": "GetLastError",
            "prototype": ["_Post_equals_last_error_ DWORD GetLastError();"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "kernel32",
            "comment": "Retrieves the calling thread's last-error code value. The last-error code is maintained on a per-thread basis. Multiple threads do not overwrite each other's last-error code."
        },
        "GetMessageW": {
            "neutralApiName": "GetMessage",
            "prototype": ["BOOL GetMessageW(\\n  LPMSG lpMsg,\\n  HWND  hWnd,\\n  UINT  wMsgFilterMin,\\n  UINT  wMsgFilterMax\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpMsg": "Pointer<MSG>",
                "hWnd": "IntPtr",
                "wMsgFilterMin": "Uint32",
                "wMsgFilterMax": "Uint32"
            },
            "dartParams": {
                "lpMsg": "Pointer<MSG>",
                "hWnd": "int",
                "wMsgFilterMin": "int",
                "wMsgFilterMax": "int"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval."
        },
        "GetModuleBaseNameW": {
            "neutralApiName": "GetModuleBaseName",
            "prototype": ["DWORD GetModuleBaseNameW(\\n  HANDLE  hProcess,\\n  HMODULE hModule,\\n  LPWSTR  lpBaseName,\\n  DWORD   nSize\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "hProcess": "IntPtr",
                "hModule": "IntPtr",
                "lpBaseName": "Pointer<Utf16>",
                "nSize": "Uint32"
            },
            "dartParams": {
                "hProcess": "int",
                "hModule": "int",
                "lpBaseName": "Pointer<Utf16>",
                "nSize": "int"
            },
            "dllLibrary": "psapi",
            "comment": "Retrieves the base name of the specified module."
        },
        "GetModuleFileNameExW": {
            "neutralApiName": "GetModuleFileNameEx",
            "prototype": ["DWORD GetModuleFileNameExW(\\n  HANDLE  hProcess,\\n  HMODULE hModule,\\n  LPWSTR  lpFilename,\\n  DWORD   nSize\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "hProcess": "IntPtr",
                "hModule": "IntPtr",
                "lpFilename": "Pointer<Utf16>",
                "nSize": "Uint32"
            },
            "dartParams": {
                "hProcess": "int",
                "hModule": "int",
                "lpFilename": "Pointer<Utf16>",
                "nSize": "int"
            },
            "dllLibrary": "psapi",
            "comment": "Retrieves the fully qualified path for the file containing the specified module."
        },
        "GetModuleFileNameW": {
            "neutralApiName": "GetModuleFileName",
            "prototype": ["DWORD GetModuleFileNameW(\\n  HMODULE hModule,\\n  LPWSTR  lpFilename,\\n  DWORD   nSize\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hModule": "IntPtr",
                "lpFilename": "Pointer<Utf16>",
                "nSize": "Uint32"
            },
            "dartParams": {
                "hModule": "int",
                "lpFilename": "Pointer<Utf16>",
                "nSize": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves the fully qualified path for the file that contains the specified module. The module must have been loaded by the current process."
        },
        "GetModuleHandleW": {
            "neutralApiName": "GetModuleHandle",
            "prototype": ["HMODULE GetModuleHandleW(\\n  LPCWSTR lpModuleName\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "lpModuleName": "Pointer<Utf16>"
            },
            "dartParams": {
                "lpModuleName": "Pointer<Utf16>"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves a module handle for the specified module. The module must have been loaded by the calling process."
        },
        "GetMonitorBrightness": {
            "neutralApiName": "GetMonitorBrightness",
            "prototype": ["_BOOL GetMonitorBrightness(\\n  HANDLE  hMonitor,\\n  LPDWORD pdwMinimumBrightness,\\n  LPDWORD pdwCurrentBrightness,\\n  LPDWORD pdwMaximumBrightness\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "pdwMinimumBrightness": "Pointer<Uint32>",
                "pdwCurrentBrightness": "Pointer<Uint32>",
                "pdwMaximumBrightness": "Pointer<Uint32>"
            },
            "dartParams": {
                "hMonitor": "int",
                "pdwMinimumBrightness": "Pointer<Uint32>",
                "pdwCurrentBrightness": "Pointer<Uint32>",
                "pdwMaximumBrightness": "Pointer<Uint32>"
            },
            "dllLibrary": "dxva2",
            "comment": "Retrieves a monitor's minimum, maximum, and current brightness settings."
        },
        "GetMonitorCapabilities": {
            "neutralApiName": "GetMonitorCapabilities",
            "prototype": ["_BOOL GetMonitorCapabilities(\\n  HANDLE  hMonitor,\\n  LPDWORD pdwMonitorCapabilities,\\n  LPDWORD pdwSupportedColorTemperatures\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "pdwMonitorCapabilities": "Pointer<Uint32>",
                "pdwSupportedColorTemperatures": "Pointer<Uint32>"
            },
            "dartParams": {
                "hMonitor": "int",
                "pdwMonitorCapabilities": "Pointer<Uint32>",
                "pdwSupportedColorTemperatures": "Pointer<Uint32>"
            },
            "dllLibrary": "dxva2",
            "comment": "Retrieves the configuration capabilities of a monitor. Call this function to find out which high-level monitor configuration functions are supported by the monitor."
        },
        "GetMonitorColorTemperature": {
            "neutralApiName": "GetMonitorColorTemperature",
            "prototype": ["_BOOL GetMonitorColorTemperature(\\n  HANDLE                 hMonitor,\\n  LPMC_COLOR_TEMPERATURE pctCurrentColorTemperature\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "pctCurrentColorTemperature": "Pointer<Int32>"
            },
            "dartParams": {
                "hMonitor": "int",
                "pctCurrentColorTemperature": "Pointer<Int32>"
            },
            "dllLibrary": "dxva2",
            "comment": "Retrieves a monitor's current color temperature."
        },
        "GetMonitorContrast": {
            "neutralApiName": "GetMonitorContrast",
            "prototype": ["_BOOL GetMonitorContrast(\\n  HANDLE  hMonitor,\\n  LPDWORD pdwMinimumContrast,\\n  LPDWORD pdwCurrentContrast,\\n  LPDWORD pdwMaximumContrast\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "pdwMinimumContrast": "Pointer<Uint32>",
                "pdwCurrentContrast": "Pointer<Uint32>",
                "pdwMaximumContrast": "Pointer<Uint32>"
            },
            "dartParams": {
                "hMonitor": "int",
                "pdwMinimumContrast": "Pointer<Uint32>",
                "pdwCurrentContrast": "Pointer<Uint32>",
                "pdwMaximumContrast": "Pointer<Uint32>"
            },
            "dllLibrary": "dxva2",
            "comment": "Retrieves a monitor's minimum, maximum, and current contrast settings."
        },
        "GetMonitorDisplayAreaPosition": {
            "neutralApiName": "GetMonitorDisplayAreaPosition",
            "prototype": ["_BOOL GetMonitorDisplayAreaPosition(\\n  HANDLE           hMonitor,\\n  MC_POSITION_TYPE ptPositionType,\\n  LPDWORD          pdwMinimumPosition,\\n  LPDWORD          pdwCurrentPosition,\\n  LPDWORD          pdwMaximumPosition\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "ptPositionType": "Int32",
                "pdwMinimumPosition": "Pointer<Uint32>",
                "pdwCurrentPosition": "Pointer<Uint32>",
                "pdwMaximumPosition": "Pointer<Uint32>"
            },
            "dartParams": {
                "hMonitor": "int",
                "ptPositionType": "int",
                "pdwMinimumPosition": "Pointer<Uint32>",
                "pdwCurrentPosition": "Pointer<Uint32>",
                "pdwMaximumPosition": "Pointer<Uint32>"
            },
            "dllLibrary": "dxva2",
            "comment": "Retrieves a monitor's minimum, maximum, and current horizontal or vertical position."
        },
        "GetMonitorDisplayAreaSize": {
            "neutralApiName": "GetMonitorDisplayAreaSize",
            "prototype": ["_BOOL GetMonitorDisplayAreaSize(\\n  HANDLE       hMonitor,\\n  MC_SIZE_TYPE stSizeType,\\n  LPDWORD      pdwMinimumWidthOrHeight,\\n  LPDWORD      pdwCurrentWidthOrHeight,\\n  LPDWORD      pdwMaximumWidthOrHeight\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "stSizeType": "Int32",
                "pdwMinimumWidthOrHeight": "Pointer<Uint32>",
                "pdwCurrentWidthOrHeight": "Pointer<Uint32>",
                "pdwMaximumWidthOrHeight": "Pointer<Uint32>"
            },
            "dartParams": {
                "hMonitor": "int",
                "stSizeType": "int",
                "pdwMinimumWidthOrHeight": "Pointer<Uint32>",
                "pdwCurrentWidthOrHeight": "Pointer<Uint32>",
                "pdwMaximumWidthOrHeight": "Pointer<Uint32>"
            },
            "dllLibrary": "dxva2",
            "comment": "Retrieves a monitor's minimum, maximum, and current width or height."
        },
        "GetMonitorInfoW": {
            "neutralApiName": "GetMonitorInfo",
            "prototype": ["BOOL GetMonitorInfoW(\\n  HMONITOR      hMonitor,\\n  LPMONITORINFO lpmi\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "lpmi": "Pointer<MONITORINFO>"
            },
            "dartParams": {
                "hMonitor": "int",
                "lpmi": "Pointer<MONITORINFO>"
            },
            "dllLibrary": "user32",
            "comment": "The GetMonitorInfo function retrieves information about a display monitor."
        },
        "GetMonitorRedGreenOrBlueDrive": {
            "neutralApiName": "GetMonitorRedGreenOrBlueDrive",
            "prototype": ["_BOOL GetMonitorRedGreenOrBlueDrive(\\n  HANDLE        hMonitor,\\n  MC_DRIVE_TYPE dtDriveType,\\n  LPDWORD       pdwMinimumDrive,\\n  LPDWORD       pdwCurrentDrive,\\n  LPDWORD       pdwMaximumDrive\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "dtDriveType": "Int32",
                "pdwMinimumDrive": "Pointer<Uint32>",
                "pdwCurrentDrive": "Pointer<Uint32>",
                "pdwMaximumDrive": "Pointer<Uint32>"
            },
            "dartParams": {
                "hMonitor": "int",
                "dtDriveType": "int",
                "pdwMinimumDrive": "Pointer<Uint32>",
                "pdwCurrentDrive": "Pointer<Uint32>",
                "pdwMaximumDrive": "Pointer<Uint32>"
            },
            "dllLibrary": "dxva2",
            "comment": "Retrieves a monitor's red, green, or blue drive value."
        },
        "GetMonitorRedGreenOrBlueGain": {
            "neutralApiName": "GetMonitorRedGreenOrBlueGain",
            "prototype": ["_BOOL GetMonitorRedGreenOrBlueGain(\\n  HANDLE       hMonitor,\\n  MC_GAIN_TYPE gtGainType,\\n  LPDWORD      pdwMinimumGain,\\n  LPDWORD      pdwCurrentGain,\\n  LPDWORD      pdwMaximumGain\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "gtGainType": "Int32",
                "pdwMinimumGain": "Pointer<Uint32>",
                "pdwCurrentGain": "Pointer<Uint32>",
                "pdwMaximumGain": "Pointer<Uint32>"
            },
            "dartParams": {
                "hMonitor": "int",
                "gtGainType": "int",
                "pdwMinimumGain": "Pointer<Uint32>",
                "pdwCurrentGain": "Pointer<Uint32>",
                "pdwMaximumGain": "Pointer<Uint32>"
            },
            "dllLibrary": "dxva2",
            "comment": "Retrieves a monitor's red, green, or blue gain value."
        },
        "GetMonitorTechnologyType": {
            "neutralApiName": "GetMonitorTechnologyType",
            "prototype": ["_BOOL GetMonitorTechnologyType(\\n  HANDLE                       hMonitor,\\n  LPMC_DISPLAY_TECHNOLOGY_TYPE pdtyDisplayTechnologyType\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "pdtyDisplayTechnologyType": "Pointer<Int32>"
            },
            "dartParams": {
                "hMonitor": "int",
                "pdtyDisplayTechnologyType": "Pointer<Int32>"
            },
            "dllLibrary": "dxva2",
            "comment": "Retrieves the type of technology used by a monitor."
        },
        "GetNativeSystemInfo": {
            "neutralApiName": "GetNativeSystemInfo",
            "prototype": ["void GetNativeSystemInfo(\\n  LPSYSTEM_INFO lpSystemInfo\\n);"],
            "nativeReturn": "Void",
            "dartReturn": "void",
            "nativeParams": {
                "lpSystemInfo": "Pointer<SYSTEM_INFO>"
            },
            "dartParams": {
                "lpSystemInfo": "Pointer<SYSTEM_INFO>"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves information about the current system to an application running under WOW64. If the function is called from a 64-bit application, or on a 64-bit system that does not have an Intel64 or x64 processor (such as ARM64), it is equivalent to the GetSystemInfo function."
        },
        "GetNextDlgGroupItem": {
            "neutralApiName": "GetNextDlgGroupItem",
            "prototype": ["HWND GetNextDlgGroupItem(\\n  HWND hDlg,\\n  HWND hCtl,\\n  BOOL bPrevious\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hDlg": "IntPtr",
                "hCtl": "IntPtr",
                "bPrevious": "Int32"
            },
            "dartParams": {
                "hDlg": "int",
                "hCtl": "int",
                "bPrevious": "int"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves a handle to the first control in a group of controls that precedes (or follows) the specified control in a dialog box."
        },
        "GetNextDlgTabItem": {
            "neutralApiName": "GetNextDlgTabItem",
            "prototype": ["HWND GetNextDlgTabItem(\\n  HWND hDlg,\\n  HWND hCtl,\\n  BOOL bPrevious\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hDlg": "IntPtr",
                "hCtl": "IntPtr",
                "bPrevious": "Int32"
            },
            "dartParams": {
                "hDlg": "int",
                "hCtl": "int",
                "bPrevious": "int"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves a handle to the first control that has the WS_TABSTOP style that precedes (or follows) the specified control."
        },
        "GetNumberOfPhysicalMonitorsFromHMONITOR": {
            "neutralApiName": "GetNumberOfPhysicalMonitorsFromHMONITOR",
            "prototype": ["_BOOL GetNumberOfPhysicalMonitorsFromHMONITOR(\\n  HMONITOR hMonitor,\\n  LPDWORD  pdwNumberOfPhysicalMonitors\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "pdwNumberOfPhysicalMonitors": "Pointer<Uint32>"
            },
            "dartParams": {
                "hMonitor": "int",
                "pdwNumberOfPhysicalMonitors": "Pointer<Uint32>"
            },
            "dllLibrary": "dxva2",
            "comment": "Retrieves the number of physical monitors associated with an HMONITOR monitor handle. Call this function before calling GetPhysicalMonitorsFromHMONITOR."
        },
        "GetObjectW": {
            "neutralApiName": "GetObject",
            "prototype": ["int GetObject(\\n  HANDLE h,\\n  int    c,\\n  LPVOID pv\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "h": "IntPtr",
                "c": "Int32",
                "pv": "Pointer"
            },
            "dartParams": {
                "h": "int",
                "c": "int",
                "pv": "Pointer"
            },
            "dllLibrary": "gdi32",
            "comment": "The GetObject function retrieves information for the specified graphics object."
        },
        "GetOpenFileNameW": {
            "neutralApiName": "GetOpenFileName",
            "prototype": ["BOOL GetOpenFileNameW(\\n  LPOPENFILENAMEW Arg1\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "arg1": "Pointer<OPENFILENAME>"
            },
            "dartParams": {
                "arg1": "Pointer<OPENFILENAME>"
            },
            "dllLibrary": "comdlg32",
            "comment": "Creates an Open dialog box that lets the user specify the drive, directory, and the name of a file or set of files to be opened."
        },
        "GetParent": {
            "neutralApiName": "GetParent",
            "prototype": ["HWND GetParent(\\n  HWND hWnd\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr"
            },
            "dartParams": {
                "hWnd": "int"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves a handle to the specified window's parent or owner."
        },
        "GetPhysicallyInstalledSystemMemory": {
            "neutralApiName": "GetPhysicallyInstalledSystemMemory",
            "prototype": ["BOOL GetPhysicallyInstalledSystemMemory(\\n  PULONGLONG TotalMemoryInKilobytes\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "TotalMemoryInKilobytes": "Pointer<Uint64>"
            },
            "dartParams": {
                "TotalMemoryInKilobytes": "Pointer<Uint64>"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves the amount of RAM that is physically installed on the computer."
        },
        "GetPhysicalMonitorsFromHMONITOR": {
            "neutralApiName": "GetPhysicalMonitorsFromHMONITOR",
            "prototype": ["_BOOL GetPhysicalMonitorsFromHMONITOR(\\n  HMONITOR           hMonitor,\\n  DWORD              dwPhysicalMonitorArraySize,\\n  LPPHYSICAL_MONITOR pPhysicalMonitorArray\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "dwPhysicalMonitorArraySize": "Uint32",
                "pPhysicalMonitorArray": "Pointer"
            },
            "dartParams": {
                "hMonitor": "int",
                "dwPhysicalMonitorArraySize": "int",
                "pPhysicalMonitorArray": "Pointer"
            },
            "dllLibrary": "dxva2",
            "comment": "Retrieves the physical monitors associated with an HMONITOR monitor handle."
        },
        "GetProcAddress": {
            "neutralApiName": "GetProcAddress",
            "prototype": ["FARPROC GetProcAddress(\\n  HMODULE hModule,\\n  LPCSTR  lpProcName\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hModule": "IntPtr",
                "lpProcName": "Pointer<Uint8>"
            },
            "dartParams": {
                "hModule": "int",
                "lpProcName": "Pointer<Uint8>"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL)."
        },
        "GetProcessDpiAwareness": {
            "neutralApiName": "GetProcessDpiAwareness",
            "prototype": ["HRESULT GetProcessDpiAwareness(\\n  HANDLE                hprocess,\\n  PROCESS_DPI_AWARENESS *value\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hprocess": "IntPtr",
                "value": "Pointer<Int32>"
            },
            "dartParams": {
                "hprocess": "int",
                "value": "Pointer<Int32>"
            },
            "dllLibrary": "shcore",
            "comment": "Retrieves the dots per inch (dpi) awareness of the specified process."
        },
        "GetProcessHeap": {
            "neutralApiName": "GetProcessHeap",
            "prototype": ["HANDLE GetProcessHeap();"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "kernel32",
            "comment": "Retrieves a handle to the default heap of the calling process. This handle can then be used in subsequent calls to the heap functions."
        },
        "GetProductInfo": {
            "neutralApiName": "GetProductInfo",
            "prototype": ["BOOL GetProductInfo(\\n  DWORD  dwOSMajorVersion,\\n  DWORD  dwOSMinorVersion,\\n  DWORD  dwSpMajorVersion,\\n  DWORD  dwSpMinorVersion,\\n  PDWORD pdwReturnedProductType\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "dwOSMajorVersion": "Uint32",
                "dwOSMinorVersion": "Uint32",
                "dwSpMajorVersion": "Uint32",
                "dwSpMinorVersion": "Uint32",
                "pdwReturnedProductType": "Pointer<Uint32>"
            },
            "dartParams": {
                "dwOSMajorVersion": "int",
                "dwOSMinorVersion": "int",
                "dwSpMajorVersion": "int",
                "dwSpMinorVersion": "int",
                "pdwReturnedProductType": "Pointer<Uint32>"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves the product type for the operating system on the local computer, and maps the type to the product types supported by the specified operating system."
        },
        "GetSaveFileNameW": {
            "neutralApiName": "GetSaveFileName",
            "prototype": ["BOOL GetSaveFileNameW(\\n  LPOPENFILENAMEW Arg1\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "arg1": "Pointer<OPENFILENAME>"
            },
            "dartParams": {
                "arg1": "Pointer<OPENFILENAME>"
            },
            "dllLibrary": "comdlg32",
            "comment": "Creates a Save dialog box that lets the user specify the drive, directory, and name of a file to save."
        },
        "GetScrollInfo": {
            "neutralApiName": "GetScrollInfo",
            "prototype": ["BOOL GetScrollInfo(\\n  HWND         hwnd,\\n  int          nBar,\\n  LPSCROLLINFO lpsi\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hwnd": "IntPtr",
                "nBar": "Int32",
                "lpsi": "Pointer<SCROLLINFO>"
            },
            "dartParams": {
                "hwnd": "int",
                "nBar": "int",
                "lpsi": "Pointer<SCROLLINFO>"
            },
            "dllLibrary": "user32",
            "comment": "The GetScrollInfo function retrieves the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb)."
        },
        "GetShellWindow": {
            "neutralApiName": "GetShellWindow",
            "prototype": ["HWND GetShellWindow();"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "user32",
            "comment": "Retrieves a handle to the Shell's desktop window."
        },
        "GetStdHandle": {
            "neutralApiName": "GetStdHandle",
            "prototype": ["HANDLE WINAPI GetStdHandle(\\n  _In_ DWORD nStdHandle\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "nStdHandle": "Uint32"
            },
            "dartParams": {
                "nStdHandle": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves a handle to the specified standard device (standard input, standard output, or standard error)."
        },
        "GetStockObject": {
            "neutralApiName": "GetStockObject",
            "prototype": ["HGDIOBJ GetStockObject(\\n  int i\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "i": "Int32"
            },
            "dartParams": {
                "i": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The GetStockObject function retrieves a handle to one of the stock pens, brushes, fonts, or palettes."
        },
        "GetSysColor": {
            "neutralApiName": "GetSysColor",
            "prototype": ["DWORD GetSysColor(\\n  int nIndex\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "nIndex": "Int32"
            },
            "dartParams": {
                "nIndex": "int"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves the current color of the specified display element. Display elements are the parts of a window and the display that appear on the system display screen."
        },
        "GetSystemDpiForProcess": {
            "neutralApiName": "GetSystemDpiForProcess",
            "prototype": ["UINT GetSystemDpiForProcess(\\n  HANDLE hProcess\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "hProcess": "IntPtr"
            },
            "dartParams": {
                "hProcess": "int"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves the system DPI associated with a given process. This is useful for avoiding compatibility issues that arise from sharing DPI-sensitive information between multiple system-aware processes with different system DPI values."
        },
        "GetSystemInfo": {
            "neutralApiName": "GetSystemInfo",
            "prototype": ["void GetSystemInfo(\\n  LPSYSTEM_INFO lpSystemInfo\\n);"],
            "nativeReturn": "Void",
            "dartReturn": "void",
            "nativeParams": {
                "lpSystemInfo": "Pointer<SYSTEM_INFO>"
            },
            "dartParams": {
                "lpSystemInfo": "Pointer<SYSTEM_INFO>"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves information about the current system. To retrieve accurate information for an application running on WOW64, call the GetNativeSystemInfo function."
        },
        "GetSystemMenu": {
            "neutralApiName": "GetSystemMenu",
            "prototype": ["HMENU GetSystemMenu(\\n  HWND hWnd,\\n  BOOL bRevert\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "bRevert": "Int32"
            },
            "dartParams": {
                "hWnd": "int",
                "bRevert": "int"
            },
            "dllLibrary": "user32",
            "comment": "Enables the application to access the window menu (also known as the system menu or the control menu) for copying and modifying."
        },
        "GetSystemMetrics": {
            "neutralApiName": "GetSystemMetrics",
            "prototype": ["int GetSystemMetrics(\\n  int nIndex\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "nIndex": "Int32"
            },
            "dartParams": {
                "nIndex": "int"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves the specified system metric or system configuration setting. Note that all dimensions retrieved by GetSystemMetrics are in pixels."
        },
        "GetSystemMetricsForDpi": {
            "neutralApiName": "GetSystemMetricsForDpi",
            "prototype": ["int GetSystemMetricsForDpi(\\n  int  nIndex,\\n  UINT dpi\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "nIndex": "Int32",
                "dpi": "Uint32"
            },
            "dartParams": {
                "nIndex": "int",
                "dpi": "int"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves the specified system metric or system configuration setting taking into account a provided DPI."
        },
        "GetSystemPowerStatus": {
            "neutralApiName": "GetSystemPowerStatus",
            "prototype": ["BOOL GetSystemPowerStatus(\\n  LPSYSTEM_POWER_STATUS lpSystemPowerStatus\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpSystemPowerStatus": "Pointer<SYSTEM_POWER_STATUS>"
            },
            "dartParams": {
                "lpSystemPowerStatus": "Pointer<SYSTEM_POWER_STATUS>"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves the power status of the system. The status indicates whether the system is running on AC or DC power, whether the battery is currently charging, how much battery life remains, and if battery saver is on or off."
        },
        "GetTempPathW": {
            "neutralApiName": "GetTempPath",
            "prototype": ["DWORD GetTempPathW(\\n  DWORD  nBufferLength,\\n  LPWSTR lpBuffer\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "nBufferLength": "Uint32",
                "lpBuffer": "Pointer<Utf16>"
            },
            "dartParams": {
                "nBufferLength": "int",
                "lpBuffer": "Pointer<Utf16>"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves the path of the directory designated for temporary files."
        },
        "GetTextMetricsW": {
            "neutralApiName": "GetTextMetrics",
            "prototype": ["BOOL GetTextMetrics(\\n  HDC          hdc,\\n  LPTEXTMETRIC lptm\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "lptm": "Pointer<TEXTMETRIC>"
            },
            "dartParams": {
                "hdc": "int",
                "lptm": "Pointer<TEXTMETRIC>"
            },
            "dllLibrary": "gdi32",
            "comment": "The GetTextMetrics function fills the specified buffer with the metrics for the currently selected font."
        },
        "GetVersionExW": {
            "neutralApiName": "GetVersionEx",
            "prototype": ["NOT_BUILD_WINDOWS_DEPRECATE BOOL GetVersionExW(\\n  LPOSVERSIONINFOW lpVersionInformation\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpVersionInformation": "Pointer<OSVERSIONINFO>"
            },
            "dartParams": {
                "lpVersionInformation": "Pointer<OSVERSIONINFO>"
            },
            "dllLibrary": "kernel32",
            "comment": "With the release of Windows 8.1, the behavior of the GetVersionEx API has changed in the value it will return for the operating system version. The value returned by the GetVersionEx function now depends on how the application is manifested. Applications not manifested for Windows 8.1 or Windows 10 will return the Windows 8 OS version value (6.2). Once an application is manifested for a given operating system version, GetVersionEx will always return the version that the application is manifested for in future releases."
        },
        "GetVolumePathNamesForVolumeNameW": {
            "neutralApiName": "GetVolumePathNamesForVolumeName",
            "prototype": ["BOOL GetVolumePathNamesForVolumeNameW(\\n  LPCWSTR lpszVolumeName,\\n  LPWCH   lpszVolumePathNames,\\n  DWORD   cchBufferLength,\\n  PDWORD  lpcchReturnLength\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpszVolumeName": "Pointer<Utf16>",
                "lpszVolumePathNames": "Pointer<Utf16>",
                "cchBufferLength": "Uint32",
                "lpcchReturnLength": "Pointer<Uint32>"
            },
            "dartParams": {
                "lpszVolumeName": "Pointer<Utf16>",
                "lpszVolumePathNames": "Pointer<Utf16>",
                "cchBufferLength": "int",
                "lpcchReturnLength": "Pointer<Uint32>"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves a list of drive letters and mounted folder paths for the specified volume."
        },
        "GetWindow": {
            "neutralApiName": "GetWindow",
            "prototype": ["HWND GetWindow(\\n  HWND hWnd,\\n  UINT uCmd\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "uCmd": "Uint32"
            },
            "dartParams": {
                "hWnd": "int",
                "uCmd": "int"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window."
        },
        "GetWindowRect": {
            "neutralApiName": "GetWindowRect",
            "prototype": ["BOOL GetWindowRect(\\n  HWND   hWnd,\\n  LPRECT lpRect\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "lpRect": "Pointer<RECT>"
            },
            "dartParams": {
                "hWnd": "int",
                "lpRect": "Pointer<RECT>"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen."
        },
        "GetWindowTextLengthW": {
            "neutralApiName": "GetWindowTextLength",
            "prototype": ["int GetWindowTextLengthW(\\n  HWND hWnd\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr"
            },
            "dartParams": {
                "hWnd": "int"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar). If the specified window is a control, the function retrieves the length of the text within the control. However, GetWindowTextLength cannot retrieve the length of the text of an edit control in another application."
        },
        "GetWindowTextW": {
            "neutralApiName": "GetWindowText",
            "prototype": ["int GetWindowTextW(\\n  HWND   hWnd,\\n  LPWSTR lpString,\\n  int    nMaxCount\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "lpString": "Pointer<Utf16>",
                "nMaxCount": "Int32"
            },
            "dartParams": {
                "hWnd": "int",
                "lpString": "Pointer<Utf16>",
                "nMaxCount": "int"
            },
            "dllLibrary": "user32",
            "comment": "Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, GetWindowText cannot retrieve the text of a control in another application."
        },
        "GlobalAlloc": {
            "neutralApiName": "GlobalAlloc",
            "prototype": ["DECLSPEC_ALLOCATOR HGLOBAL GlobalAlloc(\\n  UINT   uFlags,\\n  SIZE_T dwBytes\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "uFlags": "Uint32",
                "dwBytes": "IntPtr"
            },
            "dartParams": {
                "uFlags": "int",
                "dwBytes": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Allocates the specified number of bytes from the heap."
        },
        "GlobalFree": {
            "neutralApiName": "GlobalFree",
            "prototype": ["HGLOBAL GlobalFree(\\n  _Frees_ptr_opt_ HGLOBAL hMem\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hMem": "IntPtr"
            },
            "dartParams": {
                "hMem": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Frees the specified global memory object and invalidates its handle."
        },
        "GlobalLock": {
            "neutralApiName": "GlobalLock",
            "prototype": ["LPVOID GlobalLock(\\n  HGLOBAL hMem\\n);"],
            "nativeReturn": "Pointer",
            "dartReturn": "Pointer",
            "nativeParams": {
                "hMem": "IntPtr"
            },
            "dartParams": {
                "hMem": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Locks a global memory object and returns a pointer to the first byte of the object's memory block."
        },
        "GlobalUnlock": {
            "neutralApiName": "GlobalUnlock",
            "prototype": ["BOOL GlobalUnlock(\\n  HGLOBAL hMem\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMem": "IntPtr"
            },
            "dartParams": {
                "hMem": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Decrements the lock count associated with a memory object that was allocated with GMEM_MOVEABLE. This function has no effect on memory objects allocated with GMEM_FIXED."
        },
        "HeapAlloc": {
            "neutralApiName": "HeapAlloc",
            "prototype": ["DECLSPEC_ALLOCATOR LPVOID HeapAlloc(\\n  HANDLE hHeap,\\n  DWORD  dwFlags,\\n  SIZE_T dwBytes\\n);"],
            "nativeReturn": "Pointer",
            "dartReturn": "Pointer",
            "nativeParams": {
                "hHeap": "IntPtr",
                "dwflags": "Uint32",
                "dwBytes": "Uint32"
            },
            "dartParams": {
                "hHeap": "int",
                "dwflags": "int",
                "dwBytes": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Allocates a block of memory from a heap. The allocated memory is not movable."
        },
        "HeapFree": {
            "neutralApiName": "HeapFree",
            "prototype": ["BOOL HeapFree(\\n  HANDLE                 hHeap,\\n  DWORD                  dwFlags,\\n  _Frees_ptr_opt_ LPVOID lpMem\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hHeap": "IntPtr",
                "dwFlags": "Uint32",
                "lpMem": "Pointer"
            },
            "dartParams": {
                "hHeap": "int",
                "dwFlags": "int",
                "lpMem": "Pointer"
            },
            "dllLibrary": "kernel32",
            "comment": "Frees a memory block allocated from a heap by the HeapAlloc or HeapReAlloc function."
        },
        "IIDFromString": {
            "neutralApiName": "IIDFromString",
            "prototype": ["HRESULT IIDFromString(\\n  LPCOLESTR lpsz,\\n  LPIID     lpiid\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpsz": "Pointer<Utf16>",
                "lpiid": "Pointer<GUID>"
            },
            "dartParams": {
                "lpsz": "Pointer<Utf16>",
                "lpiid": "Pointer<GUID>"
            },
            "dllLibrary": "ole32",
            "comment": "Converts a string generated by the StringFromIID function back into the original interface identifier (IID)."
        },
        "InitCommonControlsEx": {
            "neutralApiName": "InitCommonControlsEx",
            "prototype": ["BOOL InitCommonControlsEx(\\n  const INITCOMMONCONTROLSEX *picce\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "picce": "Pointer<INITCOMMONCONTROLSEX>"
            },
            "dartParams": {
                "picce": "Pointer<INITCOMMONCONTROLSEX>"
            },
            "dllLibrary": "comctl32",
            "comment": "Ensures that the common control DLL (Comctl32.dll) is loaded, and registers specific common control classes from the DLL. An application must call this function before creating a common control."
        },
        "InitializeProcThreadAttributeList": {
            "neutralApiName": "InitializeProcThreadAttributeList",
            "prototype": ["BOOL InitializeProcThreadAttributeList(\\n  LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,\\n  DWORD                        dwAttributeCount,\\n  DWORD                        dwFlags,\\n  PSIZE_T                      lpSize\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpAttributeList": "Pointer",
                "dwAttributeCount": "Uint32",
                "dwFlags": "Uint32",
                "lpSize": "Pointer<IntPtr>"
            },
            "dartParams": {
                "lpAttributeList": "Pointer",
                "dwAttributeCount": "int",
                "dwFlags": "int",
                "lpSize": "Pointer<IntPtr>"
            },
            "dllLibrary": "kernel32",
            "comment": "Initializes the specified list of attributes for process and thread creation."
        },
        "InvalidateRect": {
            "neutralApiName": "InvalidateRect",
            "prototype": ["BOOL InvalidateRect(\\n  HWND       hWnd,\\n  const RECT *lpRect,\\n  BOOL       bErase\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "lpRect": "Pointer<RECT>",
                "bErase": "Int32"
            },
            "dartParams": {
                "hWnd": "int",
                "lpRect": "Pointer<RECT>",
                "bErase": "int"
            },
            "dllLibrary": "user32",
            "comment": "The InvalidateRect function adds a rectangle to the specified window's update region. The update region represents the portion of the window's client area that must be redrawn."
        },
        "IsClipboardFormatAvailable": {
            "neutralApiName": "IsClipboardFormatAvailable",
            "prototype": ["BOOL IsClipboardFormatAvailable(\\n  UINT format\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "format": "Uint32"
            },
            "dartParams": {
                "format": "int"
            },
            "dllLibrary": "user32",
            "comment": "Determines whether the clipboard contains data in the specified format."
        },
        "IsDebuggerPresent": {
            "neutralApiName": "IsDebuggerPresent",
            "prototype": ["BOOL IsDebuggerPresent();"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "kernel32",
            "comment": "Determines whether the calling process is being debugged by a user-mode debugger."
        },
        "IsDialogMessageW": {
            "neutralApiName": "IsDialogMessage",
            "prototype": ["BOOL IsDialogMessageW(\\n  HWND  hDlg,\\n  LPMSG lpMsg\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hDlg": "IntPtr",
                "lpMsg": "Pointer<MSG>"
            },
            "dartParams": {
                "hDlg": "int",
                "lpMsg": "Pointer<MSG>"
            },
            "dllLibrary": "user32",
            "comment": "Determines whether a message is intended for the specified dialog box and, if it is, processes the message."
        },
        "IsWindowVisible": {
            "neutralApiName": "IsWindowVisible",
            "prototype": ["BOOL IsWindowVisible(\\n  HWND hWnd\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr"
            },
            "dartParams": {
                "hWnd": "int"
            },
            "dllLibrary": "user32",
            "comment": "Determines the visibility state of the specified window."
        },
        "IsZoomed": {
            "neutralApiName": "IsZoomed",
            "prototype": ["BOOL IsZoomed(\\n HWND hWnd\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr"
            },
            "dartParams": {
                "hWnd": "int"
            },
            "dllLibrary": "user32",
            "comment": "Determines whether a window is maximized."
        },
        "KillTimer": {
            "neutralApiName": "KillTimer",
            "prototype": ["BOOL KillTimer(\\n  HWND     hWnd,\\n  UINT_PTR uIDEvent\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "uIDEvent": "IntPtr"
            },
            "dartParams": {
                "hWnd": "int",
                "uIDEvent": "int"
            },
            "dllLibrary": "user32",
            "comment": "Destroys the specified timer."
        },
        "LineTo": {
            "neutralApiName": "LineTo",
            "prototype": ["BOOL LineTo(\\n  HDC hdc,\\n  int x,\\n  int y\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "x": "Int32",
                "y": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "x": "int",
                "y": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The LineTo function draws a line from the current position up to, but not including, the specified point."
        },
        "LoadCursorW": {
            "neutralApiName": "LoadCursor",
            "prototype": ["HCURSOR LoadCursorW(\\n  HINSTANCE hInstance,\\n  LPCWSTR   lpCursorName\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hInstance": "IntPtr",
                "lpCursorName": "Pointer<Utf16>"
            },
            "dartParams": {
                "hInstance": "int",
                "lpCursorName": "Pointer<Utf16>"
            },
            "dllLibrary": "user32",
            "comment": "Loads the specified cursor resource from the executable (.EXE) file associated with an application instance. Note: this function has been superseded by the LoadImage function."
        },
        "LoadIconW": {
            "neutralApiName": "LoadIcon",
            "prototype": ["HICON LoadIconW(\\n  HINSTANCE hInstance,\\n  LPCWSTR   lpIconName\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hInstance": "IntPtr",
                "lpIconName": "Pointer<Utf16>"
            },
            "dartParams": {
                "hInstance": "int",
                "lpIconName": "Pointer<Utf16>"
            },
            "dllLibrary": "user32",
            "comment": ""
        },
        "LoadImageW": {
            "neutralApiName": "LoadImage",
            "prototype": ["HANDLE LoadImageW(\\n  HINSTANCE hInst,\\n  LPCWSTR   name,\\n  UINT      type,\\n  int       cx,\\n  int       cy,\\n  UINT      fuLoad\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hInst": "IntPtr",
                "name": "Pointer<Utf16>",
                "type": "Uint32",
                "cx": "Int32",
                "cy": "Int32",
                "fuLoad": "Uint32"
            },
            "dartParams": {
                "hInst": "int",
                "name": "Pointer<Utf16>",
                "type": "int",
                "cx": "int",
                "cy": "int",
                "fuLoad": "int"
            },
            "dllLibrary": "user32",
            "comment": "Loads an icon, cursor, animated cursor, or bitmap."
        },
        "LoadLibraryW": {
            "neutralApiName": "LoadLibrary",
            "prototype": ["HMODULE LoadLibraryW(\\n  LPCWSTR lpLibFileName\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "lpLibFileName": "Pointer<Utf16>"
            },
            "dartParams": {
                "lpLibFileName": "Pointer<Utf16>"
            },
            "dllLibrary": "kernel32",
            "comment": "Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded."
        },
        "LoadResource": {
            "neutralApiName": "LoadResource",
            "prototype": ["HGLOBAL LoadResource(\\n  HMODULE hModule,\\n  HRSRC   hResInfo\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hModule": "IntPtr",
                "hResInfo": "IntPtr"
            },
            "dartParams": {
                "hModule": "int",
                "hResInfo": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory."
        },
        "LockResource": {
            "neutralApiName": "LockResource",
            "prototype": ["LPVOID LockResource(\\n  HGLOBAL hResData\\n);"],
            "nativeReturn": "Pointer",
            "dartReturn": "Pointer",
            "nativeParams": {
                "hResData": "IntPtr"
            },
            "dartParams": {
                "hResData": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves a pointer to the specified resource in memory."
        },
        "LockWorkStation": {
            "neutralApiName": "LockWorkStation",
            "prototype": ["BOOL LockWorkStation();"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "user32",
            "comment": "Locks the workstation's display. Locking a workstation protects it from unauthorized use."
        },
        "LogicalToPhysicalPoint": {
            "neutralApiName": "LogicalToPhysicalPoint",
            "prototype": ["BOOL LogicalToPhysicalPoint(\\n  HWND    hWnd,\\n  LPPOINT lpPoint\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "lpPoint": "Pointer<POINT>"
            },
            "dartParams": {
                "hWnd": "int",
                "lpPoint": "Pointer<POINT>"
            },
            "dllLibrary": "user32",
            "comment": "Converts the logical coordinates of a point in a window to physical coordinates."
        },
        "MapDialogRect": {
            "neutralApiName": "MapDialogRect",
            "prototype": ["BOOL MapDialogRect(\\n  HWND   hDlg,\\n  LPRECT lpRect\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hDlg": "IntPtr",
                "lpRect": "Pointer<RECT>"
            },
            "dartParams": {
                "hDlg": "int",
                "lpRect": "Pointer<RECT>"
            },
            "dllLibrary": "user32",
            "comment": "Converts the specified dialog box units to screen units (pixels). The function replaces the coordinates in the specified RECT structure with the converted coordinates, which allows the structure to be used to create a dialog box or position a control within a dialog box."
        },
        "mciGetDeviceIDW": {
            "neutralApiName": "mciGetDeviceID",
            "prototype": ["MCIDEVICEID mciGetDeviceID(\\n  Â LPCTSTR lpszDevice\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "lpszDevice": "Pointer<Utf16>"
            },
            "dartParams": {
                "lpszDevice": "Pointer<Utf16>"
            },
            "dllLibrary": "winmm",
            "comment": "The mciGetDeviceID function retrieves the device identifier corresponding to the name of an open device."
        },
        "mciGetDeviceIDFromElementIDW": {
            "neutralApiName": "mciGetDeviceIDFromElementID",
            "prototype": ["MCIDEVICEID mciGetDeviceIDFromElementID(\\n  Â DWORD Â Â dwElementID,\\n  Â LPCTSTR lpstrType\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "dwElementID": "Uint32",
                "lpstrType": "Pointer<Utf16>"
            },
            "dartParams": {
                "dwElementID": "int",
                "lpstrType": "Pointer<Utf16>"
            },
            "dllLibrary": "winmm",
            "comment": "The mciGetDeviceIDFromElementID function retrieves the MCI device identifier corresponding to an element identifier."
        },
        "mciGetErrorStringW": {
            "neutralApiName": "mciGetErrorString",
            "prototype": ["BOOL mciGetErrorString(\\n  Â DWORD Â fdwError,\\n  Â LPTSTR lpszErrorText,\\n  Â UINT Â Â cchErrorText\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "fdwError": "Uint32",
                "lpszErrorText": "Pointer<Utf16>",
                "cchErrorText": "Uint32"
            },
            "dartParams": {
                "fdwError": "int",
                "lpszErrorText": "Pointer<Utf16>",
                "cchErrorText": "int"
            },
            "dllLibrary": "winmm",
            "comment": "The mciGetErrorString function retrieves a string that describes the specified MCI error code."
        },
        "mciSendCommandW": {
            "neutralApiName": "mciSendCommand",
            "prototype": ["MCIERROR mciSendCommand(\\n  Â MCIDEVICEID IDDevice,\\n  Â UINT Â Â Â Â Â Â Â uMsg,\\n  Â DWORD_PTR Â Â fdwCommand,\\n  Â DWORD_PTR Â Â dwParam\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "IDDevice": "Uint32",
                "uMsg": "Uint32",
                "fdwCommand": "IntPtr",
                "dwParam": "IntPtr"
            },
            "dartParams": {
                "IDDevice": "int",
                "uMsg": "int",
                "fdwCommand": "int",
                "dwParam": "int"
            },
            "dllLibrary": "winmm",
            "comment": "The mciSendCommand function sends a command message to the specified MCI device."
        },
        "mciSendStringW": {
            "neutralApiName": "mciSendString",
            "prototype": ["MCIERROR mciSendString(\\n  Â LPCTSTR lpszCommand,\\n  Â LPTSTR Â lpszReturnString,\\n  Â UINT Â Â Â cchReturn,\\n  Â HANDLE Â hwndCallback\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "lpszCommand": "Pointer<Utf16>",
                "lpszReturnString": "Pointer<Utf16>",
                "cchReturn": "Uint32",
                "hwndCallback": "IntPtr"
            },
            "dartParams": {
                "lpszCommand": "Pointer<Utf16>",
                "lpszReturnString": "Pointer<Utf16>",
                "cchReturn": "int",
                "hwndCallback": "int"
            },
            "dllLibrary": "winmm",
            "comment": "The mciSendString function sends a command string to an MCI device. The device that the command is sent to is specified in the command string."
        },
        "MessageBoxW": {
            "neutralApiName": "MessageBox",
            "prototype": ["int MessageBoxW(\\n  HWND    hWnd,\\n  LPCWSTR lpText,\\n  LPCWSTR lpCaption,\\n  UINT    uType\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "lpText": "Pointer<Utf16>",
                "lpCaption": "Pointer<Utf16>",
                "uType": "Uint32"
            },
            "dartParams": {
                "hWnd": "int",
                "lpText": "Pointer<Utf16>",
                "lpCaption": "Pointer<Utf16>",
                "uType": "int"
            },
            "dllLibrary": "user32",
            "comment": "Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked."
        },
        "midiOutGetNumDevs": {
            "neutralApiName": "midiOutGetNumDevs",
            "prototype": ["UINT midiOutGetNumDevs();"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "winmm",
            "comment": "The midiOutGetNumDevs function retrieves the number of MIDI output devices present in the system."
        },
        "MonitorFromPoint": {
            "neutralApiName": "MonitorFromPoint",
            "prototype": ["HMONITOR MonitorFromPoint(\\n  POINT pt,\\n  DWORD dwFlags\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "pt": "Int64",
                "dwFlags": "Uint32"
            },
            "dartParams": {
                "pt": "int",
                "dwFlags": "int"
            },
            "dllLibrary": "user32",
            "comment": "The MonitorFromPoint function retrieves a handle to the display monitor that contains a specified point."
        },
        "MonitorFromWindow": {
            "neutralApiName": "MonitorFromWindow",
            "prototype": ["HMONITOR MonitorFromWindow(\\n  HWND  hwnd,\\n  DWORD dwFlags\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hwnd": "IntPtr",
                "dwFlags": "Uint32"
            },
            "dartParams": {
                "hwnd": "int",
                "dwFlags": "int"
            },
            "dllLibrary": "user32",
            "comment": "The MonitorFromWindow function retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window."
        },
        "MoveToEx": {
            "neutralApiName": "MoveToEx",
            "prototype": ["BOOL MoveToEx(\\n  HDC     hdc,\\n  int     x,\\n  int     y,\\n  LPPOINT lppt\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "x": "Int32",
                "y": "Int32",
                "lppt": "Pointer<POINT>"
            },
            "dartParams": {
                "hdc": "int",
                "x": "int",
                "y": "int",
                "lppt": "Pointer<POINT>"
            },
            "dllLibrary": "gdi32",
            "comment": "The MoveToEx function updates the current position to the specified point and optionally returns the previous position."
        },
        "MoveWindow": {
            "neutralApiName": "MoveWindow",
            "prototype": ["BOOL MoveWindow(\\n  HWND hWnd,\\n  int  X,\\n  int  Y,\\n  int  nWidth,\\n  int  nHeight,\\n  BOOL bRepaint\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "X": "Int32",
                "Y": "Int32",
                "nWidth": "Int32",
                "nHeight": "Int32",
                "bRepaint": "Int32"
            },
            "dartParams": {
                "hWnd": "int",
                "X": "int",
                "Y": "int",
                "nWidth": "int",
                "nHeight": "int",
                "bRepaint": "int"
            },
            "dllLibrary": "user32",
            "comment": "Changes the position and dimensions of the specified window. For a top-level window, the position and dimensions are relative to the upper-left corner of the screen. For a child window, they are relative to the upper-left corner of the parent window's client area."
        },
        "MsgWaitForMultipleObjects": {
            "neutralApiName": "MsgWaitForMultipleObjects",
            "prototype": ["DWORD MsgWaitForMultipleObjects(\\n  DWORD        nCount,\\n  const HANDLE *pHandles,\\n  BOOL         fWaitAll,\\n  DWORD        dwMilliseconds,\\n  DWORD        dwWakeMask\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "nCount": "Uint32",
                "pHandles": "Pointer<IntPtr>",
                "fWaitAll": "Int32",
                "dwMilliseconds": "Uint32",
                "dwWakeMask": "Uint32"
            },
            "dartParams": {
                "nCount": "int",
                "pHandles": "Pointer<IntPtr>",
                "fWaitAll": "int",
                "dwMilliseconds": "int",
                "dwWakeMask": "int"
            },
            "dllLibrary": "user32",
            "comment": "Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses. The objects can include input event objects, which you specify using the dwWakeMask parameter."
        },
        "OpenIcon": {
            "neutralApiName": "OpenIcon",
            "prototype": ["BOOL OpenIcon(\\n  HWND hWnd\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr"
            },
            "dartParams": {
                "hWnd": "int"
            },
            "dllLibrary": "user32",
            "comment": "Restores a minimized (iconic) window to its previous size and position; it then activates the window."
        },
        "OpenProcess": {
            "neutralApiName": "OpenProcess",
            "prototype": ["HANDLE OpenProcess(\\n  DWORD dwDesiredAccess,\\n  BOOL  bInheritHandle,\\n  DWORD dwProcessId\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "dwDesiredAccess": "Uint32",
                "bInheritHandle": "Int32",
                "dwProcessId": "Uint32"
            },
            "dartParams": {
                "dwDesiredAccess": "int",
                "bInheritHandle": "int",
                "dwProcessId": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Opens an existing local process object."
        },
        "PeekMessageW": {
            "neutralApiName": "PeekMessage",
            "prototype": ["BOOL PeekMessageW(\\n  LPMSG lpMsg,\\n  HWND  hWnd,\\n  UINT  wMsgFilterMin,\\n  UINT  wMsgFilterMax,\\n  UINT  wRemoveMsg\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpMsg": "Pointer<MSG>",
                "hWnd": "IntPtr",
                "wMsgFilterMin": "Uint32",
                "wMsgFilterMax": "Uint32",
                "wRemoveMsg": "Uint32"
            },
            "dartParams": {
                "lpMsg": "Pointer<MSG>",
                "hWnd": "int",
                "wMsgFilterMin": "int",
                "wMsgFilterMax": "int",
                "wRemoveMsg": "int"
            },
            "dllLibrary": "user32",
            "comment": "Dispatches incoming sent messages, checks the thread message queue for a posted message, and retrieves the message (if any exist)."
        },
        "PhysicalToLogicalPoint": {
            "neutralApiName": "PhysicalToLogicalPoint",
            "prototype": ["BOOL PhysicalToLogicalPoint(\\n  HWND    hWnd,\\n  LPPOINT lpPoint\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "lpPoint": "Pointer<POINT>"
            },
            "dartParams": {
                "hWnd": "int",
                "lpPoint": "Pointer<POINT>"
            },
            "dllLibrary": "user32",
            "comment": "Converts the physical coordinates of a point in a window to logical coordinates."
        },
        "Pie": {
            "neutralApiName": "Pie",
            "prototype": ["BOOL Pie(\\n  HDC hdc,\\n  int left,\\n  int top,\\n  int right,\\n  int bottom,\\n  int xr1,\\n  int yr1,\\n  int xr2,\\n  int yr2\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "left": "Int32",
                "top": "Int32",
                "right": "Int32",
                "bottom": "Int32",
                "xr1": "Int32",
                "yr1": "Int32",
                "xr2": "Int32",
                "yr2": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "left": "int",
                "top": "int",
                "right": "int",
                "bottom": "int",
                "xr1": "int",
                "yr1": "int",
                "xr2": "int",
                "yr2": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The Pie function draws a pie-shaped wedge bounded by the intersection of an ellipse and two radials. The pie is outlined by using the current pen and filled by using the current brush."
        },
        "PlaySoundW": {
            "neutralApiName": "PlaySound",
            "prototype": ["BOOL PlaySound(\\n  LPCTSTR pszSound,\\n  HMODULE hmod,\\n  DWORD fdwSound);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "pszSound": "Pointer<Utf16>",
                "hmod": "IntPtr",
                "fdwSound": "Uint32"
            },
            "dartParams": {
                "pszSound": "Pointer<Utf16>",
                "hmod": "int",
                "fdwSound": "int"
            },
            "dllLibrary": "winmm",
            "comment": "The PlaySound function plays a sound specified by the given file name, resource, or system event."
        },
        "PolyBezier": {
            "neutralApiName": "PolyBezier",
            "prototype": ["BOOL PolyBezier(\\n  HDC         hdc,\\n  const POINT *apt,\\n  DWORD       cpt\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "apt": "Pointer<POINT>",
                "cpt": "Uint32"
            },
            "dartParams": {
                "hdc": "int",
                "apt": "Pointer<POINT>",
                "cpt": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The PolyBezier function draws one or more BÃ©zier curves."
        },
        "PolyBezierTo": {
            "neutralApiName": "PolyBezierTo",
            "prototype": ["BOOL PolyBezierTo(\\n  HDC         hdc,\\n  const POINT *apt,\\n  DWORD       cpt\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "apt": "Pointer<POINT>",
                "cpt": "Uint32"
            },
            "dartParams": {
                "hdc": "int",
                "apt": "Pointer<POINT>",
                "cpt": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The PolyBezierTo function draws one or more BÃ©zier curves."
        },
        "PolyDraw": {
            "neutralApiName": "PolyDraw",
            "prototype": ["BOOL PolyDraw(\\n  HDC         hdc,\\n  const POINT *apt,\\n  const BYTE  *aj,\\n  int         cpt\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "apt": "Pointer<POINT>",
                "aj": "Pointer<Uint8>",
                "cpt": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "apt": "Pointer<POINT>",
                "aj": "Pointer<Uint8>",
                "cpt": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The PolyDraw function draws a set of line segments and BÃ©zier curves."
        },
        "Polygon": {
            "neutralApiName": "Polygon",
            "prototype": ["BOOL Polygon(\\n  HDC         hdc,\\n  const POINT *apt,\\n  int         cpt\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "apt": "Pointer<POINT>",
                "cpt": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "apt": "Pointer<POINT>",
                "cpt": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The Polygon function draws a polygon consisting of two or more vertices connected by straight lines. The polygon is outlined by using the current pen and filled by using the current brush and polygon fill mode."
        },
        "Polyline": {
            "neutralApiName": "Polyline",
            "prototype": ["BOOL Polyline(\\n  HDC         hdc,\\n  const POINT *apt,\\n  int         cpt\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "apt": "Pointer<POINT>",
                "cpt": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "apt": "Pointer<POINT>",
                "cpt": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The Polyline function draws a series of line segments by connecting the points in the specified array."
        },
        "PolylineTo": {
            "neutralApiName": "PolylineTo",
            "prototype": ["BOOL PolylineTo(\\n  HDC         hdc,\\n  const POINT *apt,\\n  DWORD         cpt\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "apt": "Pointer<POINT>",
                "cpt": "Uint32"
            },
            "dartParams": {
                "hdc": "int",
                "apt": "Pointer<POINT>",
                "cpt": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The PolylineTo function draws one or more straight lines."
        },
        "PolyPolygon": {
            "neutralApiName": "PolyPolygon",
            "prototype": ["BOOL PolyPolygon(\\n  HDC         hdc,\\n  const POINT *apt,\\n  const INT   *asz,\\n  int         csz\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "apt": "Pointer<POINT>",
                "asz": "Pointer<Int32>",
                "csz": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "apt": "Pointer<POINT>",
                "asz": "Pointer<Int32>",
                "csz": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The PolyPolygon function draws a series of closed polygons. Each polygon is outlined by using the current pen and filled by using the current brush and polygon fill mode. The polygons drawn by this function can overlap."
        },
        "PolyPolyline": {
            "neutralApiName": "PolyPolyline",
            "prototype": ["BOOL PolyPolyline(\\n  HDC         hdc,\\n  const POINT *apt,\\n  const DWORD *asz,\\n  DWORD       csz\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "apt": "Pointer<POINT>",
                "asz": "Pointer<Int32>",
                "csz": "Uint32"
            },
            "dartParams": {
                "hdc": "int",
                "apt": "Pointer<POINT>",
                "asz": "Pointer<Int32>",
                "csz": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The PolyPolyline function draws multiple series of connected line segments."
        },
        "PostMessageW": {
            "neutralApiName": "PostMessage",
            "prototype": ["BOOL PostMessageW(\\n  HWND   hWnd,\\n  UINT   Msg,\\n  WPARAM wParam,\\n  LPARAM lParam\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "Msg": "Uint32",
                "wParam": "IntPtr",
                "lParam": "IntPtr"
            },
            "dartParams": {
                "hWnd": "int",
                "Msg": "int",
                "wParam": "int",
                "lParam": "int"
            },
            "dllLibrary": "user32",
            "comment": "Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message."
        },
        "PostThreadMessageW": {
            "neutralApiName": "PostThreadMessage",
            "prototype": ["BOOL PostThreadMessageW(\\n  DWORD  idThread,\\n  UINT   Msg,\\n  WPARAM wParam,\\n  LPARAM lParam\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "idThread": "Uint32",
                "Msg": "Uint32",
                "wParam": "IntPtr",
                "lParam": "IntPtr"
            },
            "dartParams": {
                "idThread": "int",
                "Msg": "int",
                "wParam": "int",
                "lParam": "int"
            },
            "dllLibrary": "user32",
            "comment": "Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message."
        },
        "PostQuitMessage": {
            "neutralApiName": "PostQuitMessage",
            "prototype": ["void PostQuitMessage(\\n  int nExitCode\\n);"],
            "nativeReturn": "Void",
            "dartReturn": "void",
            "nativeParams": {
                "nExitCode": "Int32"
            },
            "dartParams": {
                "nExitCode": "int"
            },
            "dllLibrary": "user32",
            "comment": "Indicates to the system that a thread has made a request to terminate (quit). It is typically used in response to a WM_DESTROY message."
        },
        "PtInRegion": {
            "neutralApiName": "PtInRegion",
            "prototype": ["BOOL PtInRegion(\\n  HRGN hrgn,\\n  int  x,\\n  int  y\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hrgn": "IntPtr",
                "x": "Int32",
                "y": "Int32"
            },
            "dartParams": {
                "hrgn": "int",
                "x": "int",
                "y": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The PtInRegion function determines whether the specified point is inside the specified region."
        },
        "QueryDosDeviceW": {
            "neutralApiName": "QueryDosDevice",
            "prototype": ["DWORD QueryDosDeviceW(\\n  LPCWSTR lpDeviceName,\\n  LPWSTR  lpTargetPath,\\n  DWORD   ucchMax\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "lpDeviceName": "Pointer<Utf16>",
                "lpTargetPath": "Pointer<Utf16>",
                "ucchMax": "Uint32"
            },
            "dartParams": {
                "lpDeviceName": "Pointer<Utf16>",
                "lpTargetPath": "Pointer<Utf16>",
                "ucchMax": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves information about MS-DOS device names. The function can obtain the current mapping for a particular MS-DOS device name. The function can also obtain a list of all existing MS-DOS device names."
        },
        "QueryPerformanceCounter": {
            "neutralApiName": "QueryPerformanceCounter",
            "prototype": ["BOOL QueryPerformanceCounter(\\n  LARGE_INTEGER *lpPerformanceCount\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpPerformanceCount": "Pointer<Int64>"
            },
            "dartParams": {
                "lpPerformanceCount": "Pointer<Int64>"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves the current value of the performance counter, which is a high resolution (<1us) time stamp that can be used for time-interval measurements."
        },
        "QueryPerformanceFrequency": {
            "neutralApiName": "QueryPerformanceFrequency",
            "prototype": ["BOOL QueryPerformanceFrequency(\\n  LARGE_INTEGER *lpFrequency\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpPerformanceCount": "Pointer<Int64>"
            },
            "dartParams": {
                "lpPerformanceCount": "Pointer<Int64>"
            },
            "dllLibrary": "kernel32",
            "comment": "Retrieves the frequency of the performance counter. The frequency of the performance counter is fixed at system boot and is consistent across all processors. Therefore, the frequency need only be queried upon application initialization, and the result can be cached."
        },
        "ReadConsoleW": {
            "neutralApiName": "ReadConsole",
            "prototype": ["BOOL WINAPI ReadConsole(\\n  _In_Â Â Â Â Â HANDLE Â hConsoleInput,\\n  _Out_Â Â Â Â LPVOID Â lpBuffer,\\n  _In_Â Â Â Â Â DWORD Â Â nNumberOfCharsToRead,\\n  _Out_Â Â Â Â LPDWORD lpNumberOfCharsRead,\\n  _In_opt_Â LPVOID Â pInputControl\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hConsoleInput": "IntPtr",
                "lpBuffer": "Pointer",
                "nNumberOfCharsToRead": "Uint32",
                "lpNumberOfCharsRead": "Pointer<Uint32>",
                "pInputControl": "Pointer"
            },
            "dartParams": {
                "hConsoleInput": "int",
                "lpBuffer": "Pointer",
                "nNumberOfCharsToRead": "int",
                "lpNumberOfCharsRead": "Pointer<Uint32>",
                "pInputControl": "Pointer"
            },
            "dllLibrary": "kernel32",
            "comment": "Reads character input from the console input buffer and removes it from the buffer."
        },
        "ReadFile": {
            "neutralApiName": "ReadFile",
            "prototype": ["BOOL ReadFile(\\n  HANDLE       hFile,\\n  LPVOID       lpBuffer,\\n  DWORD        nNumberOfBytesToRead,\\n  LPDWORD      lpNumberOfBytesRead,\\n  LPOVERLAPPED lpOverlapped\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hFile": "IntPtr",
                "lpBuffer": "Pointer",
                "nNumberOfBytesToRead": "Uint32",
                "lpNumberOfBytesRead": "Pointer<Uint32>",
                "lpOverlapped": "Pointer"
            },
            "dartParams": {
                "hFile": "int",
                "lpBuffer": "Pointer",
                "nNumberOfBytesToRead": "int",
                "lpNumberOfBytesRead": "Pointer<Uint32>",
                "lpOverlapped": "Pointer"
            },
            "dllLibrary": "kernel32",
            "comment": "Reads data from the specified file or input/output (I/O) device. Reads occur at the position specified by the file pointer if supported by the device."
        },
        "ReadProcessMemory": {
            "neutralApiName": "ReadProcessMemory",
            "prototype": ["BOOL ReadProcessMemory(\\n  HANDLE  hProcess,\\n  LPCVOID lpBaseAddress,\\n  LPVOID  lpBuffer,\\n  SIZE_T  nSize,\\n  SIZE_T  *lpNumberOfBytesRead\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hProcess": "IntPtr",
                "lpBaseAddress": "Pointer<Void>",
                "lpBuffer": "Pointer<Void>",
                "nSize": "IntPtr",
                "lpNumberOfBytesRead": "Pointer<IntPtr>"
            },
            "dartParams": {
                "hProcess": "int",
                "lpBaseAddress": "Pointer<Void>",
                "lpBuffer": "Pointer<Void>",
                "nSize": "int",
                "lpNumberOfBytesRead": "Pointer<IntPtr>"
            },
            "dllLibrary": "kernel32",
            "comment": "ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function."
        },
        "Rectangle": {
            "neutralApiName": "Rectangle",
            "prototype": ["BOOL Rectangle(\\n  HDC hdc,\\n  int left,\\n  int top,\\n  int right,\\n  int bottom\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "left": "Int32",
                "top": "Int32",
                "right": "Int32",
                "bottom": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "left": "int",
                "top": "int",
                "right": "int",
                "bottom": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The Rectangle function draws a rectangle. The rectangle is outlined by using the current pen and filled by using the current brush."
        },
        "RectInRegion": {
            "neutralApiName": "RectInRegion",
            "prototype": ["BOOL RectInRegion(\\n  HRGN       hrgn,\\n  const RECT *lprect\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hrgn": "IntPtr",
                "lprect": "Pointer<RECT>"
            },
            "dartParams": {
                "hrgn": "int",
                "lprect": "Pointer<RECT>"
            },
            "dllLibrary": "gdi32",
            "comment": "The RectInRegion function determines whether any part of the specified rectangle is within the boundaries of a region."
        },
        "RegCloseKey": {
            "neutralApiName": "RegCloseKey",
            "prototype": ["LSTATUS RegCloseKey(\\n  HKEY hKey\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hKey": "IntPtr"
            },
            "dartParams": {
                "hKey": "int"
            },
            "dllLibrary": "advapi32",
            "comment": "Closes a handle to the specified registry key."
        },
        "RegisterClassW": {
            "neutralApiName": "RegisterClass",
            "prototype": ["ATOM RegisterClassW(\\n  const WNDCLASSW *lpWndClass\\n);"],
            "nativeReturn": "Int16",
            "dartReturn": "int",
            "nativeParams": {
                "lpWndClass": "Pointer<WNDCLASS>"
            },
            "dartParams": {
                "lpWndClass": "Pointer<WNDCLASS>"
            },
            "dllLibrary": "user32",
            "comment": "Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function."
        },
        "RegisterWindowMessageW": {
            "neutralApiName": "RegisterWindowMessage",
            "prototype": ["UINT RegisterWindowMessageW(\\n  LPCWSTR lpString\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "lpString": "Pointer<Utf16>"
            },
            "dartParams": {
                "lpString": "Pointer<Utf16>"
            },
            "dllLibrary": "user32",
            "comment": "Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages."
        },
        "RegOpenKeyExW": {
            "neutralApiName": "RegOpenKeyEx",
            "prototype": ["LSTATUS RegOpenKeyExW(\\n  HKEY    hKey,\\n  LPCWSTR lpSubKey,\\n  DWORD   ulOptions,\\n  REGSAM  samDesired,\\n  PHKEY   phkResult\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hKey": "IntPtr",
                "lpSubKey": "Pointer<Utf16>",
                "ulOptions": "Uint32",
                "samDesired": "Int32",
                "phkResult": "Pointer<IntPtr>"
            },
            "dartParams": {
                "hKey": "int",
                "lpSubKey": "Pointer<Utf16>",
                "ulOptions": "int",
                "samDesired": "int",
                "phkResult": "Pointer<IntPtr>"
            },
            "dllLibrary": "advapi32",
            "comment": "Opens the specified registry key. Note that key names are not case sensitive."
        },
        "RegQueryValueExW": {
            "neutralApiName": "RegQueryValueEx",
            "prototype": ["LSTATUS RegQueryValueExW(\\n  HKEY    hKey,\\n  LPCWSTR lpValueName,\\n  LPDWORD lpReserved,\\n  LPDWORD lpType,\\n  LPBYTE  lpData,\\n  LPDWORD lpcbData\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hKey": "IntPtr",
                "lpValueName": "Pointer<Utf16>",
                "lpReserved": "Pointer<Uint32>",
                "lpType": "Pointer<Uint32>",
                "lpData": "Pointer<Uint8>",
                "lpcbData": "Pointer<Uint32>"
            },
            "dartParams": {
                "hKey": "int",
                "lpValueName": "Pointer<Utf16>",
                "lpReserved": "Pointer<Uint32>",
                "lpType": "Pointer<Uint32>",
                "lpData": "Pointer<Uint8>",
                "lpcbData": "Pointer<Uint32>"
            },
            "dllLibrary": "advapi32",
            "comment": "Retrieves the type and data for the specified value name associated with an open registry key. To ensure that any string values (REG_SZ, REG_MULTI_SZ, and REG_EXPAND_SZ) returned are null-terminated, use the RegGetValue function."
        },
        "ReleaseDC": {
            "neutralApiName": "ReleaseDC",
            "prototype": ["int ReleaseDC(\\n  HWND hWnd,\\n  HDC  hDC\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "hDC": "IntPtr"
            },
            "dartParams": {
                "hWnd": "int",
                "hDC": "int"
            },
            "dllLibrary": "user32",
            "comment": "The ReleaseDC function releases a device context (DC), freeing it for use by other applications. The effect of the ReleaseDC function depends on the type of DC. It frees only common and window DCs. It has no effect on class or private DCs."
        },
        "ReplaceTextW": {
            "neutralApiName": "ReplaceText",
            "prototype": ["HWND ReplaceTextW(\\n  LPFINDREPLACEW Arg1\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "Arg1": "Pointer<FINDREPLACE>"
            },
            "dartParams": {
                "Arg1": "Pointer<FINDREPLACE>"
            },
            "dllLibrary": "comdlg32",
            "comment": "Creates a system-defined modeless dialog box that lets the user specify a string to search for and a replacement string, as well as options to control the find and replace operations."
        },
        "ReplyMessage": {
            "neutralApiName": "ReplyMessage",
            "prototype": ["BOOL ReplyMessage(\\n  LRESULT lResult\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lResult": "IntPtr"
            },
            "dartParams": {
                "lResult": "int"
            },
            "dllLibrary": "user32",
            "comment": "Replies to a message sent from another thread by the SendMessage function."
        },
        "ResizePseudoConsole": {
            "neutralApiName": "ResizePseudoConsole",
            "prototype": ["HRESULT WINAPI ResizePseudoConsole(\\n    _In_ HPCON hPC ,\\n    _In_ COORD size\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hPC": "Pointer<IntPtr>",
                "size": "Int32"
            },
            "dartParams": {
                "hPC": "Pointer<IntPtr>",
                "size": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Resizes the internal buffers for a pseudoconsole to the given size."
        },
        "RoundRect": {
            "neutralApiName": "RoundRect",
            "prototype": ["BOOL RoundRect(\\n  HDC hdc,\\n  int left,\\n  int top,\\n  int right,\\n  int bottom,\\n  int width,\\n  int height\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "left": "Int32",
                "top": "Int32",
                "right": "Int32",
                "bottom": "Int32",
                "width": "Int32",
                "height": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "left": "int",
                "top": "int",
                "right": "int",
                "bottom": "int",
                "width": "int",
                "height": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The RoundRect function draws a rectangle with rounded corners. The rectangle is outlined by using the current pen and filled by using the current brush."
        },
        "SaveCurrentMonitorSettings": {
            "neutralApiName": "SaveCurrentMonitorSettings",
            "prototype": ["_BOOL SaveCurrentMonitorSettings(\\n  HANDLE hMonitor\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr"
            },
            "dartParams": {
                "hMonitor": "int"
            },
            "dllLibrary": "dxva2",
            "comment": "Saves the current monitor settings to the display's nonvolatile storage."
        },
        "SaveDC": {
            "neutralApiName": "SaveDC",
            "prototype": ["int SaveDC(\\n  HDC hdc\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr"
            },
            "dartParams": {
                "hdc": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The SaveDC function saves the current state of the specified device context (DC) by copying data describing selected objects and graphic modes (such as the bitmap, brush, palette, font, pen, region, drawing mode, and mapping mode) to a context stack."
        },
        "ScrollConsoleScreenBufferW": {
            "neutralApiName": "ScrollConsoleScreenBuffer",
            "prototype": ["BOOL WINAPI ScrollConsoleScreenBuffer(\\n  _In_Â Â Â Â Â Â Â Â Â Â Â HANDLE Â Â Â Â hConsoleOutput,\\n  _In_Â Â Â Â Â const SMALL_RECT *lpScrollRectangle,\\n  _In_opt_Â const SMALL_RECT *lpClipRectangle,\\n  _In_Â Â Â Â Â Â Â Â Â Â Â COORD Â Â Â Â Â dwDestinationOrigin,\\n  _In_Â Â Â Â Â const CHAR_INFO Â *lpFill\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hConsoleOutput": "IntPtr",
                "lpScrollRectangle": "Pointer<SMALL_RECT>",
                "lpClipRectangle": "Pointer<SMALL_RECT>",
                "dwDestinationOrigin": "Int32",
                "lpFill": "Pointer<CHAR_INFO>"
            },
            "dartParams": {
                "hConsoleOutput": "int",
                "lpScrollRectangle": "Pointer<SMALL_RECT>",
                "lpClipRectangle": "Pointer<SMALL_RECT>",
                "dwDestinationOrigin": "int",
                "lpFill": "Pointer<CHAR_INFO>"
            },
            "dllLibrary": "kernel32",
            "comment": "Moves a block of data in a screen buffer. The effects of the move can be limited by specifying a clipping rectangle, so the contents of the console screen buffer outside the clipping rectangle are unchanged."
        },
        "ScrollWindow": {
            "neutralApiName": "ScrollWindow",
            "prototype": ["BOOL ScrollWindow(\\n  HWND       hWnd,\\n  int        XAmount,\\n  int        YAmount,\\n  const RECT *lpRect,\\n  const RECT *lpClipRect\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "XAmount": "Int32",
                "YAmount": "Int32",
                "lpRect": "Pointer<RECT>",
                "lpClipRect": "Pointer<RECT>"
            },
            "dartParams": {
                "hWnd": "int",
                "XAmount": "int",
                "YAmount": "int",
                "lpRect": "Pointer<RECT>",
                "lpClipRect": "Pointer<RECT>"
            },
            "dllLibrary": "user32",
            "comment": "The ScrollWindow function scrolls the contents of the specified window's client area."
        },
        "SelectObject": {
            "neutralApiName": "SelectObject",
            "prototype": ["HGDIOBJ SelectObject(\\n  HDC     hdc,\\n  HGDIOBJ h\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "h": "IntPtr"
            },
            "dartParams": {
                "hdc": "int",
                "h": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The SelectObject function selects an object into the specified device context (DC). The new object replaces the previous object of the same type."
        },
        "SendDlgItemMessageW": {
            "neutralApiName": "SendDlgItemMessage",
            "prototype": ["LRESULT SendDlgItemMessageW(\\n  HWND   hDlg,\\n  int    nIDDlgItem,\\n  UINT   Msg,\\n  WPARAM wParam,\\n  LPARAM lParam\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hDlg": "IntPtr",
                "nIDDlgItem": "Int32",
                "Msg": "Uint32",
                "wParam": "IntPtr",
                "lParam": "IntPtr"
            },
            "dartParams": {
                "hDlg": "int",
                "nIDDlgItem": "int",
                "Msg": "int",
                "wParam": "int",
                "lParam": "int"
            },
            "dllLibrary": "user32",
            "comment": "Sends a message to the specified control in a dialog box."
        },
        "SendInput": {
            "neutralApiName": "SendInput",
            "prototype": ["UINT SendInput(\\n  UINT    cInputs,\\n  LPINPUT pInputs,\\n  int     cbSize\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "cInputs": "Uint32",
                "pInputs": "Pointer<INPUT>",
                "cbSize": "Int32"
            },
            "dartParams": {
                "cInputs": "int",
                "pInputs": "Pointer<INPUT>",
                "cbSize": "int"
            },
            "dllLibrary": "user32",
            "comment": "Synthesizes keystrokes, mouse motions, and button clicks."
        },
        "SendMessageW": {
            "neutralApiName": "SendMessage",
            "prototype": ["LRESULT SendMessage(\\n  HWND   hWnd,\\n  UINT   Msg,\\n  WPARAM wParam,\\n  LPARAM lParam\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "Msg": "Uint32",
                "wParam": "IntPtr",
                "lParam": "IntPtr"
            },
            "dartParams": {
                "hWnd": "int",
                "Msg": "int",
                "wParam": "int",
                "lParam": "int"
            },
            "dllLibrary": "user32",
            "comment": "Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message."
        },
        "SetBkColor": {
            "neutralApiName": "SetBkColor",
            "prototype": ["COLORREF SetBkColor(\\n  HDC      hdc,\\n  COLORREF color\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "color": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "color": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The SetBkColor function sets the current background color to the specified color value, or to the nearest physical color if the device cannot represent the specified color value."
        },
        "SetBkMode": {
            "neutralApiName": "SetBkMode",
            "prototype": ["int SetBkMode(\\n  HDC hdc,\\n  int mode\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "mode": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "mode": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The SetBkMode function sets the background mix mode of the specified device context. The background mix mode is used with text, hatched brushes, and pen styles that are not solid lines."
        },
        "SetConsoleCtrlHandler": {
            "neutralApiName": "SetConsoleCtrlHandler",
            "prototype": ["BOOL WINAPI SetConsoleCtrlHandler(\\n  _In_opt_Â PHANDLER_ROUTINE HandlerRoutine,\\n  _In_Â Â Â Â Â BOOL Â Â Â Â Â Â Â Â Â Â Â Â Add\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "HandlerRoutine": "Pointer<NativeFunction>",
                "Add": "Int32"
            },
            "dartParams": {
                "HandlerRoutine": "Pointer<NativeFunction>",
                "Add": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Adds or removes an application-defined HandlerRoutine function from the list of handler functions for the calling process."
        },
        "SetConsoleCursorInfo": {
            "neutralApiName": "SetConsoleCursorInfo",
            "prototype": ["BOOL WINAPI SetConsoleCursorInfo(\\n  _In_       HANDLE              hConsoleOutput,\\n  _In_ const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hConsoleOutput": "IntPtr",
                "lpConsoleCursorInfo": "Pointer<CONSOLE_CURSOR_INFO>"
            },
            "dartParams": {
                "hConsoleOutput": "int",
                "lpConsoleCursorInfo": "Pointer<CONSOLE_CURSOR_INFO>"
            },
            "dllLibrary": "kernel32",
            "comment": "Sets the size and visibility of the cursor for the specified console screen buffer."
        },
        "SetConsoleCursorPosition": {
            "neutralApiName": "SetConsoleCursorPosition",
            "prototype": ["BOOL WINAPI SetConsoleCursorPosition(\\n  _In_ HANDLE hConsoleOutput,\\n  _In_ COORD  dwCursorPosition\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hConsoleOutput": "IntPtr",
                "dwCursorPosition": "Int32"
            },
            "dartParams": {
                "hConsoleOutput": "int",
                "dwCursorPosition": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Sets the cursor position in the specified console screen buffer."
        },
        "SetConsoleDisplayMode": {
            "neutralApiName": "SetConsoleDisplayMode",
            "prototype": ["BOOL WINAPI SetConsoleDisplayMode(\\n  _In_Â Â Â Â Â Â HANDLE hConsoleOutput,\\n  _In_Â Â Â Â Â Â DWORD Â dwFlags,\\n  _Out_opt_Â PCOORD lpNewScreenBufferDimensions\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hConsoleOutput": "IntPtr",
                "dwFlags": "Uint32",
                "lpNewScreenBufferDimensions": "Pointer<COORD>"
            },
            "dartParams": {
                "hConsoleOutput": "int",
                "dwFlags": "int",
                "lpNewScreenBufferDimensions": "Pointer<COORD>"
            },
            "dllLibrary": "kernel32",
            "comment": "Sets the display mode of the specified console screen buffer."
        },
        "SetConsoleMode": {
            "neutralApiName": "SetConsoleMode",
            "prototype": ["BOOL WINAPI SetConsoleMode(\\n  _In_ HANDLE hConsoleHandle,\\n  _In_ DWORD  dwMode\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hConsoleHandle": "IntPtr",
                "dwMode": "Uint32"
            },
            "dartParams": {
                "hConsoleHandle": "int",
                "dwMode": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Sets the input mode of a console's input buffer or the output mode of a console screen buffer."
        },
        "SetConsoleTextAttribute": {
            "neutralApiName": "SetConsoleTextAttribute",
            "prototype": ["BOOL WINAPI SetConsoleTextAttribute(\\n  _In_ HANDLE hConsoleOutput,\\n  _In_ WORD   wAttributes\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hConsoleOutput": "IntPtr",
                "wAttributes": "Uint16"
            },
            "dartParams": {
                "hConsoleOutput": "int",
                "wAttributes": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Sets the attributes of characters written to the console screen buffer by the WriteFile or WriteConsole function, or echoed by the ReadFile or ReadConsole function. This function affects text written after the function call."
        },
        "SetConsoleWindowInfo": {
            "neutralApiName": "SetConsoleWindowInfo",
            "prototype": ["BOOL WINAPI SetConsoleWindowInfo(\\n  _In_Â Â Â Â Â Â Â HANDLE Â Â Â Â hConsoleOutput,\\n  _In_Â Â Â Â Â Â Â BOOL Â Â Â Â Â Â bAbsolute,\\n  _In_Â const SMALL_RECT *lpConsoleWindow\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hConsoleOutput": "IntPtr",
                "bAbsolute": "Int32",
                "lpConsoleWindow": "Pointer<SMALL_RECT>"
            },
            "dartParams": {
                "hConsoleOutput": "int",
                "bAbsolute": "int",
                "lpConsoleWindow": "Pointer<SMALL_RECT>"
            },
            "dllLibrary": "kernel32",
            "comment": "Sets the current size and position of a console screen buffer's window."
        },
        "SetCursorPos": {
            "neutralApiName": "SetCursorPos",
            "prototype": ["BOOL SetCursorPos(\\n  int X,\\n  int Y\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "X": "Int32",
                "Y": "Int32"
            },
            "dartParams": {
                "X": "int",
                "Y": "int"
            },
            "dllLibrary": "user32",
            "comment": "Moves the cursor to the specified screen coordinates. If the new coordinates are not within the screen rectangle set by the most recent ClipCursor function call, the system automatically adjusts the coordinates so that the cursor stays within the rectangle."
        },
        "SetDlgItemInt": {
            "neutralApiName": "SetDlgItemInt",
            "prototype": ["BOOL SetDlgItemInt(\\n  HWND hDlg,\\n  int  nIDDlgItem,\\n  UINT uValue,\\n  BOOL bSigned\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hDlg": "IntPtr",
                "nIDDlgItem": "Int32",
                "uValue": "Uint32",
                "bSigned": "Int32"
            },
            "dartParams": {
                "hDlg": "int",
                "nIDDlgItem": "int",
                "uValue": "int",
                "bSigned": "int"
            },
            "dllLibrary": "user32",
            "comment": "Sets the text of a control in a dialog box to the string representation of a specified integer value."
        },
        "SetDlgItemTextW": {
            "neutralApiName": "SetDlgItemText",
            "prototype": ["BOOL SetDlgItemTextW(\\n  HWND    hDlg,\\n  int     nIDDlgItem,\\n  LPCWSTR lpString\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hDlg": "IntPtr",
                "nIDDlgItem": "Int32",
                "lpString": "Pointer<Utf16>"
            },
            "dartParams": {
                "hDlg": "int",
                "nIDDlgItem": "int",
                "lpString": "Pointer<Utf16>"
            },
            "dllLibrary": "user32",
            "comment": "Sets the title or text of a control in a dialog box."
        },
        "SetFocus": {
            "neutralApiName": "SetFocus",
            "prototype": ["HWND SetFocus(\\n  HWND hWnd\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr"
            },
            "dartParams": {
                "hWnd": "int"
            },
            "dllLibrary": "user32",
            "comment": "Sets the keyboard focus to the specified window. The window must be attached to the calling thread's message queue."
        },
        "SetForegroundWindow": {
            "neutralApiName": "SetForegroundWindow",
            "prototype": ["BOOL SetForegroundWindow(\\n  HWND hWnd\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr"
            },
            "dartParams": {
                "hWnd": "int"
            },
            "dllLibrary": "user32",
            "comment": "Brings the thread that created the specified window into the foreground and activates the window. Keyboard input is directed to the window, and various visual cues are changed for the user. The system assigns a slightly higher priority to the thread that created the foreground window than it does to other threads."
        },
        "SetMapMode": {
            "neutralApiName": "SetMapMode",
            "prototype": ["int SetMapMode(\\n  HDC hdc,\\n  int iMode\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "iMode": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "iMode": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The SetMapMode function sets the mapping mode of the specified device context. The mapping mode defines the unit of measure used to transform page-space units into device-space units, and also defines the orientation of the device's x and y axes."
        },
        "SetMenuInfo": {
            "neutralApiName": "SetMenuInfo",
            "prototype": ["BOOL SetMenuInfo(\\n  HMENU       ,\\n  LPCMENUINFO \\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMenu": "IntPtr",
                "lpMenuInfo": "Pointer<MENUINFO>"
            },
            "dartParams": {
                "hMenu": "int",
                "lpMenuInfo": "Pointer<MENUINFO>"
            },
            "dllLibrary": "user32",
            "comment": "Sets information for a specified menu."
        },
        "SetMenuItemInfoW": {
            "neutralApiName": "SetMenuItemInfo",
            "prototype": ["BOOL SetMenuItemInfoW(\\n  HMENU            hmenu,\\n  UINT             item,\\n  BOOL             fByPositon,\\n  LPCMENUITEMINFOW lpmii\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hmenu": "IntPtr",
                "item": "Uint32",
                "fByPositon": "Int32",
                "lpmii": "Pointer<MENUITEMINFO>"
            },
            "dartParams": {
                "hmenu": "int",
                "item": "int",
                "fByPositon": "int",
                "lpmii": "Pointer<MENUITEMINFO>"
            },
            "dllLibrary": "user32",
            "comment": "Changes information about a menu item."
        },
        "SetMonitorBrightness": {
            "neutralApiName": "SetMonitorBrightness",
            "prototype": ["_BOOL SetMonitorBrightness(\\n  HANDLE hMonitor,\\n  DWORD  dwNewBrightness\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "dwNewBrightness": "Uint32"
            },
            "dartParams": {
                "hMonitor": "int",
                "dwNewBrightness": "int"
            },
            "dllLibrary": "dxva2",
            "comment": "Sets a monitor's brightness value. Increasing the brightness value makes the display on the monitor brighter, and decreasing it makes the display dimmer."
        },
        "SetMonitorColorTemperature": {
            "neutralApiName": "SetMonitorColorTemperature",
            "prototype": ["_BOOL SetMonitorColorTemperature(\\n  HANDLE               hMonitor,\\n  MC_COLOR_TEMPERATURE ctCurrentColorTemperature\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "ctCurrentColorTemperature": "Int32"
            },
            "dartParams": {
                "hMonitor": "int",
                "ctCurrentColorTemperature": "int"
            },
            "dllLibrary": "dxva2",
            "comment": "Sets a monitor's color temperature."
        },
        "SetMonitorContrast": {
            "neutralApiName": "SetMonitorContrast",
            "prototype": ["_BOOL SetMonitorContrast(\\n  HANDLE hMonitor,\\n  DWORD  dwNewContrast\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "dwNewContrast": "Uint32"
            },
            "dartParams": {
                "hMonitor": "int",
                "dwNewContrast": "int"
            },
            "dllLibrary": "dxva2",
            "comment": "Sets a monitor's contrast value."
        },
        "SetMonitorDisplayAreaPosition": {
            "neutralApiName": "SetMonitorDisplayAreaPosition",
            "prototype": ["_BOOL SetMonitorDisplayAreaPosition(\\n  HANDLE           hMonitor,\\n  MC_POSITION_TYPE ptPositionType,\\n  DWORD            dwNewPosition\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "ptPositionType": "Int32",
                "dwNewPosition": "Uint32"
            },
            "dartParams": {
                "hMonitor": "int",
                "ptPositionType": "int",
                "dwNewPosition": "int"
            },
            "dllLibrary": "dxva2",
            "comment": "Sets the horizontal or vertical position of a monitor's display area. Increasing the horizontal position moves the display area toward the right side of the screen; decreasing it moves the display area toward the left. Increasing the vertical position moves the display area toward the top of the screen; decreasing it moves the display area toward the bottom."
        },
        "SetMonitorDisplayAreaSize": {
            "neutralApiName": "SetMonitorDisplayAreaSize",
            "prototype": ["_BOOL SetMonitorDisplayAreaSize(\\n  HANDLE       hMonitor,\\n  MC_SIZE_TYPE stSizeType,\\n  DWORD        dwNewDisplayAreaWidthOrHeight\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "stSizeType": "Int32",
                "dwNewDisplayAreaWidthOrHeight": "Uint32"
            },
            "dartParams": {
                "hMonitor": "int",
                "stSizeType": "int",
                "dwNewDisplayAreaWidthOrHeight": "int"
            },
            "dllLibrary": "dxva2",
            "comment": "Sets the width or height of a monitor's display area."
        },
        "SetMonitorRedGreenOrBlueDrive": {
            "neutralApiName": "SetMonitorRedGreenOrBlueDrive",
            "prototype": ["_BOOL SetMonitorRedGreenOrBlueDrive(\\n  HANDLE        hMonitor,\\n  MC_DRIVE_TYPE dtDriveType,\\n  DWORD         dwNewDrive\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "dtDriveType": "Int32",
                "dwNewDrive": "Uint32"
            },
            "dartParams": {
                "hMonitor": "int",
                "dtDriveType": "int",
                "dwNewDrive": "int"
            },
            "dllLibrary": "dxva2",
            "comment": "Sets a monitor's red, green, or blue drive value."
        },
        "SetMonitorRedGreenOrBlueGain": {
            "neutralApiName": "SetMonitorRedGreenOrBlueGain",
            "prototype": ["_BOOL SetMonitorRedGreenOrBlueGain(\\n  HANDLE       hMonitor,\\n  MC_GAIN_TYPE gtGainType,\\n  DWORD        dwNewGain\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hMonitor": "IntPtr",
                "gtGainType": "Int32",
                "dwNewGain": "Uint32"
            },
            "dartParams": {
                "hMonitor": "int",
                "gtGainType": "int",
                "dwNewGain": "int"
            },
            "dllLibrary": "dxva2",
            "comment": "Sets a monitor's red, green, or blue gain value."
        },
        "SetParent": {
            "neutralApiName": "SetParent",
            "prototype": ["HWND SetParent(\\n  HWND hWndChild,\\n  HWND hWndNewParent\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hWndChild": "IntPtr",
                "hWndNewParent": "IntPtr"
            },
            "dartParams": {
                "hWndChild": "int",
                "hWndNewParent": "int"
            },
            "dllLibrary": "user32",
            "comment": "Changes the parent window of the specified child window."
        },
        "SetPixel": {
            "neutralApiName": "SetPixel",
            "prototype": ["COLORREF SetPixel(\\n  HDC      hdc,\\n  int      x,\\n  int      y,\\n  COLORREF color\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "x": "Int32",
                "y": "Int32",
                "color": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "x": "int",
                "y": "int",
                "color": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The SetPixel function sets the pixel at the specified coordinates to the specified color."
        },
        "SetProcessDPIAware": {
            "neutralApiName": "SetProcessDPIAware",
            "prototype": ["BOOL SetProcessDPIAware();"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "user32",
            "comment": "Sets the process-default DPI awareness to system-DPI awareness."
        },
        "SetProcessDpiAwareness": {
            "neutralApiName": "SetProcessDpiAwareness",
            "prototype": ["HRESULT SetProcessDpiAwareness(\\n  PROCESS_DPI_AWARENESS value\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "value": "Int32"
            },
            "dartParams": {
                "value": "int"
            },
            "dllLibrary": "shcore",
            "comment": "Sets the process-default DPI awareness level. This is equivalent to calling SetProcessDpiAwarenessContext with the corresponding DPI_AWARENESS_CONTEXT value."
        },
        "SetScrollInfo": {
            "neutralApiName": "SetScrollInfo",
            "prototype": ["int SetScrollInfo(\\n  HWND          hwnd,\\n  int           nBar,\\n  LPCSCROLLINFO lpsi,\\n  BOOL          redraw\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hwnd": "IntPtr",
                "nBar": "Int32",
                "lpsi": "Pointer<SCROLLINFO>",
                "redraw": "Int32"
            },
            "dartParams": {
                "hwnd": "int",
                "nBar": "int",
                "lpsi": "Pointer<SCROLLINFO>",
                "redraw": "int"
            },
            "dllLibrary": "user32",
            "comment": "The SetScrollInfo function sets the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb). The function also redraws the scroll bar, if requested."
        },
        "SetStdHandle": {
            "neutralApiName": "SetStdHandle",
            "prototype": ["BOOL WINAPI SetStdHandle(\\n  _In_Â DWORD Â nStdHandle\\n  _In_Â HANDLE hHandle\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "nStdHandle": "Uint32",
                "hHandle": "IntPtr"
            },
            "dartParams": {
                "nStdHandle": "int",
                "hHandle": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Sets the handle for the specified standard device (standard input, standard output, or standard error)."
        },
        "SetStretchBltMode": {
            "neutralApiName": "SetStretchBltMode",
            "prototype": ["int SetStretchBltMode(\\n  HDC hdc,\\n  int mode\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "mode": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "mode": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The SetStretchBltMode function sets the bitmap stretching mode in the specified device context."
        },
        "SetTextColor": {
            "neutralApiName": "SetTextColor",
            "prototype": ["COLORREF SetTextColor(\\n  HDC      hdc,\\n  COLORREF color\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "color": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "color": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The SetTextColor function sets the text color for the specified device context to the specified color."
        },
        "SetTimer": {
            "neutralApiName": "SetTimer",
            "prototype": ["UINT_PTR SetTimer(\\n  HWND      hWnd,\\n  UINT_PTR  nIDEvent,\\n  UINT      uElapse,\\n  TIMERPROC lpTimerFunc\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "nIDEvent": "IntPtr",
                "uElapse": "Uint32",
                "lpTimerFunc": "Pointer<NativeFunction>"
            },
            "dartParams": {
                "hWnd": "int",
                "nIDEvent": "int",
                "uElapse": "int",
                "lpTimerFunc": "Pointer<NativeFunction>"
            },
            "dllLibrary": "user32",
            "comment": "Creates a timer with the specified time-out value."
        },
        "SetViewportExtEx": {
            "neutralApiName": "SetViewportExtEx",
            "prototype": ["BOOL SetViewportExtEx(\\n  HDC    hdc,\\n  int    x,\\n  int    y,\\n  LPSIZE lpsz\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "x": "Int32",
                "y": "Int32",
                "lpsz": "Pointer<SIZE>"
            },
            "dartParams": {
                "hdc": "int",
                "x": "int",
                "y": "int",
                "lpsz": "Pointer<SIZE>"
            },
            "dllLibrary": "gdi32",
            "comment": "The SetViewportExtEx function sets the horizontal and vertical extents of the viewport for a device context by using the specified values."
        },
        "SetViewportOrgEx": {
            "neutralApiName": "SetViewportOrgEx",
            "prototype": ["BOOL SetViewportOrgEx(\\n  HDC     hdc,\\n  int     x,\\n  int     y,\\n  LPPOINT lppt\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "x": "Int32",
                "y": "Int32",
                "lppt": "Pointer<POINT>"
            },
            "dartParams": {
                "hdc": "int",
                "x": "int",
                "y": "int",
                "lppt": "Pointer<POINT>"
            },
            "dllLibrary": "gdi32",
            "comment": "The SetViewportOrgEx function specifies which device point maps to the window origin (0,0)."
        },
        "SetWindowExtEx": {
            "neutralApiName": "SetWindowExtEx",
            "prototype": ["BOOL SetWindowExtEx(\\n  HDC    hdc,\\n  int    x,\\n  int    y,\\n  LPSIZE lpsz\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "x": "Int32",
                "y": "Int32",
                "lpsz": "Pointer<SIZE>"
            },
            "dartParams": {
                "hdc": "int",
                "x": "int",
                "y": "int",
                "lpsz": "Pointer<SIZE>"
            },
            "dllLibrary": "gdi32",
            "comment": "The SetWindowExtEx function sets the horizontal and vertical extents of the window for a device context by using the specified values."
        },
        "SetWindowLongPtrW": {
            "neutralApiName": "SetWindowLongPtr",
            "prototype": ["LONG_PTR SetWindowLongPtrW(\\n  HWND     hWnd,\\n  int      nIndex,\\n  LONG_PTR dwNewLong\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "nIndex": "Int32",
                "dwNewLong": "IntPtr"
            },
            "dartParams": {
                "hWnd": "int",
                "nIndex": "int",
                "dwNewLong": "int"
            },
            "dllLibrary": "user32",
            "comment": "Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory."
        },
        "SetWindowPos": {
            "neutralApiName": "SetWindowPos",
            "prototype": ["BOOL SetWindowPos(\\n  HWND hWnd,\\n  HWND hWndInsertAfter,\\n  int  X,\\n  int  Y,\\n  int  cx,\\n  int  cy,\\n  UINT uFlags,\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "hWndInsertAfter": "IntPtr",
                "X": "Int32",
                "Y": "Int32",
                "cx": "Int32",
                "cy": "Int32",
                "uFlags": "Uint32"
            },
            "dartParams": {
                "hWnd": "int",
                "hWndInsertAfter": "int",
                "X": "int",
                "Y": "int",
                "cx": "int",
                "cy": "int",
                "uFlags": "int"
            },
            "dllLibrary": "user32",
            "comment": "Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order."
        },
        "SetWindowTextW": {
            "neutralApiName": "SetWindowText",
            "prototype": ["BOOL SetWindowTextW(\\n  HWND    hWnd,\\n  LPCWSTR lpString\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "lpString": "Pointer<Utf16>"
            },
            "dartParams": {
                "hWnd": "int",
                "lpString": "Pointer<Utf16>"
            },
            "dllLibrary": "user32",
            "comment": "Changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, SetWindowText cannot change the text of a control in another application."
        },
        "ShellAboutW": {
            "neutralApiName": "ShellAbout",
            "prototype": ["INT ShellAboutW(\\n  HWND    hWnd,\\n  LPCWSTR szApp,\\n  LPCWSTR szOtherStuff,\\n  HICON   hIcon\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "szApp": "Pointer<Utf16>",
                "szOtherStuff": "Pointer<Utf16>",
                "hIcon": "IntPtr"
            },
            "dartParams": {
                "hWnd": "int",
                "szApp": "Pointer<Utf16>",
                "szOtherStuff": "Pointer<Utf16>",
                "hIcon": "int"
            },
            "dllLibrary": "shell32",
            "comment": "Displays a ShellAbout dialog box."
        },
        "ShellExecuteExW": {
            "neutralApiName": "ShellExecuteEx",
            "prototype": ["BOOL ShellExecuteExW(\\n  SHELLEXECUTEINFOW *pExecInfo\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "pExecuteInfo": "Pointer<SHELLEXECUTEINFO>"
            },
            "dartParams": {
                "pExecuteInfo": "Pointer<SHELLEXECUTEINFO>"
            },
            "dllLibrary": "shell32",
            "comment": "Performs an operation on a specified file."
        },
        "ShellExecuteW": {
            "neutralApiName": "ShellExecute",
            "prototype": ["HINSTANCE ShellExecuteW(\\n  HWND    hwnd,\\n  LPCWSTR lpOperation,\\n  LPCWSTR lpFile,\\n  LPCWSTR lpParameters,\\n  LPCWSTR lpDirectory,\\n  INT     nShowCmd\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "hwnd": "IntPtr",
                "lpOperation": "Pointer<Utf16>",
                "lpFile": "Pointer<Utf16>",
                "lpParameters": "Pointer<Utf16>",
                "lpDirectory": "Pointer<Utf16>",
                "nShowCmd": "Int32"
            },
            "dartParams": {
                "hwnd": "int",
                "lpOperation": "Pointer<Utf16>",
                "lpFile": "Pointer<Utf16>",
                "lpParameters": "Pointer<Utf16>",
                "lpDirectory": "Pointer<Utf16>",
                "nShowCmd": "int"
            },
            "dllLibrary": "shell32",
            "comment": "Performs an operation on a specified file."
        },
        "SHCreateItemFromParsingName": {
            "neutralApiName": "SHCreateItemFromParsingName",
            "prototype": ["SHSTDAPI SHCreateItemFromParsingName(\\n  PCWSTR   pszPath,\\n  IBindCtx *pbc,\\n  REFIID   riid,\\n  void     **ppv\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "pszPath": "Pointer<Utf16>",
                "pbc": "Pointer",
                "riid": "Pointer<GUID>",
                "ppv": "Pointer<COMObject>"
            },
            "dartParams": {
                "pszPath": "Pointer<Utf16>",
                "pbc": "Pointer",
                "riid": "Pointer<GUID>",
                "ppv": "Pointer<COMObject>"
            },
            "dllLibrary": "shell32",
            "comment": "Creates and initializes a Shell item object from a parsing name."
        },
        "SHEmptyRecycleBinW": {
            "neutralApiName": "SHEmptyRecycleBin",
            "prototype": ["SHSTDAPI SHEmptyRecycleBinW(\\n  HWND    hwnd,\\n  LPCWSTR pszRootPath,\\n  DWORD   dwFlags\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hwnd": "IntPtr",
                "pszRootPath": "Pointer<Utf16>",
                "dwFlags": "Uint32"
            },
            "dartParams": {
                "hwnd": "int",
                "pszRootPath": "Pointer<Utf16>",
                "dwFlags": "int"
            },
            "dllLibrary": "shell32",
            "comment": "Empties the Recycle Bin on the specified drive."
        },
        "SHGetDiskFreeSpaceExW": {
            "neutralApiName": "SHGetDiskFreeSpaceEx",
            "prototype": ["BOOL SHGetDiskFreeSpaceExW(\\n  LPCWSTR        pszDirectoryName,\\n  ULARGE_INTEGER *pulFreeBytesAvailableToCaller,\\n  ULARGE_INTEGER *pulTotalNumberOfBytes,\\n  ULARGE_INTEGER *pulTotalNumberOfFreeBytes\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "pszDirectoryName": "Pointer<Utf16>",
                "pulFreeBytesAvailableToCaller": "Pointer<Uint64>",
                "pulTotalNumberOfBytes": "Pointer<Uint64>",
                "pulTotalNumberOfFreeBytes": "Pointer<Uint64>"
            },
            "dartParams": {
                "pszDirectoryName": "Pointer<Utf16>",
                "pulFreeBytesAvailableToCaller": "Pointer<Uint64>",
                "pulTotalNumberOfBytes": "Pointer<Uint64>",
                "pulTotalNumberOfFreeBytes": "Pointer<Uint64>"
            },
            "dllLibrary": "shell32",
            "comment": "Retrieves disk space information for a disk volume."
        },
        "SHGetDriveMedia": {
            "neutralApiName": "SHGetDriveMedia",
            "prototype": ["HRESULT SHGetDriveMedia(\\n  PCWSTR pszDrive,\\n  DWORD  *pdwMediaContent\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "pszDrive": "Pointer<Utf16>",
                "pdwMediaContent": "Pointer<Uint32>"
            },
            "dartParams": {
                "pszDrive": "Pointer<Utf16>",
                "pdwMediaContent": "Pointer<Uint32>"
            },
            "dllLibrary": "shell32",
            "comment": "Returns the type of media that is in the given drive."
        },
        "SHGetFolderPathW": {
            "neutralApiName": "SHGetFolderPath",
            "prototype": ["SHFOLDERAPI SHGetFolderPathW(\\n  HWND   hwnd,\\n  int    csidl,\\n  HANDLE hToken,\\n  DWORD  dwFlags,\\n  LPWSTR pszPath\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hwnd": "IntPtr",
                "csidl": "Int32",
                "hToken": "IntPtr",
                "dwFlags": "Uint32",
                "pszPath": "Pointer<Utf16>"
            },
            "dartParams": {
                "hwnd": "int",
                "csidl": "int",
                "hToken": "int",
                "dwFlags": "int",
                "pszPath": "Pointer<Utf16>"
            },
            "dllLibrary": "shell32",
            "comment": "Gets the path of a folder identified by a CSIDL value."
        },
        "SHGetKnownFolderPath": {
            "neutralApiName": "SHGetKnownFolderPath",
            "prototype": ["HRESULT SHGetKnownFolderPath(\\n  REFKNOWNFOLDERID rfid,\\n  DWORD            dwFlags,\\n  HANDLE           hToken,\\n  PWSTR            *ppszPath\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "rfid": "Pointer<GUID>",
                "dwFlags": "Uint32",
                "hToken": "IntPtr",
                "ppszPath": "Pointer<IntPtr>"
            },
            "dartParams": {
                "rfid": "Pointer<GUID>",
                "dwFlags": "int",
                "hToken": "int",
                "ppszPath": "Pointer<IntPtr>"
            },
            "dllLibrary": "shell32",
            "comment": "Retrieves the full path of a known folder identified by the folder's KNOWNFOLDERID."
        },
        "ShowCursor": {
            "neutralApiName": "ShowCursor",
            "prototype": ["int ShowCursor(\\n  BOOL bShow\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "bShow": "Int32"
            },
            "dartParams": {
                "bShow": "int"
            },
            "dllLibrary": "user32",
            "comment": "Displays or hides the cursor."
        },
        "ShowWindow": {
            "neutralApiName": "ShowWindow",
            "prototype": ["BOOL ShowWindow(\\n  HWND hWnd,\\n  int  nCmdShow\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "nCmdShow": "Int32"
            },
            "dartParams": {
                "hWnd": "int",
                "nCmdShow": "int"
            },
            "dllLibrary": "user32",
            "comment": "Sets the specified window's show state."
        },
        "ShowWindowAsync": {
            "neutralApiName": "ShowWindowAsync",
            "prototype": ["BOOL ShowWindowAsync(\\n  HWND hWnd,\\n  int  nCmdShow\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "nCmdShow": "Int32"
            },
            "dartParams": {
                "hWnd": "int",
                "nCmdShow": "int"
            },
            "dllLibrary": "user32",
            "comment": "Sets the show state of a window without waiting for the operation to complete."
        },
        "SHQueryRecycleBinW": {
            "neutralApiName": "SHQueryRecycleBin",
            "prototype": ["SHSTDAPI SHQueryRecycleBinW(\\n  LPCWSTR         pszRootPath,\\n  LPSHQUERYRBINFO pSHQueryRBInfo\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "pszRootPath": "Pointer<Utf16>",
                "pSHQueryRBInfo": "Pointer<SHQUERYRBINFO>"
            },
            "dartParams": {
                "pszRootPath": "Pointer<Utf16>",
                "pSHQueryRBInfo": "Pointer<SHQUERYRBINFO>"
            },
            "dllLibrary": "shell32",
            "comment": "Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive."
        },
        "Sleep": {
            "neutralApiName": "Sleep",
            "prototype": ["void Sleep(\\n  DWORD dwMilliseconds\\n);"],
            "nativeReturn": "Void",
            "dartReturn": "void",
            "nativeParams": {
                "dwMilliseconds": "Uint32"
            },
            "dartParams": {
                "dwMilliseconds": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Suspends the execution of the current thread until the time-out interval elapses."
        },
        "SoundSentry": {
            "neutralApiName": "SoundSentry",
            "prototype": ["BOOL SoundSentry();"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "user32",
            "comment": "Triggers a visual signal to indicate that a sound is playing."
        },
        "StretchBlt": {
            "neutralApiName": "StretchBlt",
            "prototype": ["BOOL StretchBlt(\\n  HDC   hdcDest,\\n  int   xDest,\\n  int   yDest,\\n  int   wDest,\\n  int   hDest,\\n  HDC   hdcSrc,\\n  int   xSrc,\\n  int   ySrc,\\n  int   wSrc,\\n  int   hSrc,\\n  DWORD rop\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdcDest": "IntPtr",
                "xDest": "Int32",
                "yDest": "Int32",
                "wDest": "Int32",
                "hDest": "Int32",
                "hdcSrc": "IntPtr",
                "xSrc": "Int32",
                "ySrc": "Int32",
                "wSrc": "Int32",
                "hSrc": "Int32",
                "rop": "Uint32"
            },
            "dartParams": {
                "hdcDest": "int",
                "xDest": "int",
                "yDest": "int",
                "wDest": "int",
                "hDest": "int",
                "hdcSrc": "int",
                "xSrc": "int",
                "ySrc": "int",
                "wSrc": "int",
                "hSrc": "int",
                "rop": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The StretchBlt function copies a bitmap from a source rectangle into a destination rectangle, stretching or compressing the bitmap to fit the dimensions of the destination rectangle, if necessary. The system stretches or compresses the bitmap according to the stretching mode currently set in the destination device context."
        },
        "StretchDIBits": {
            "neutralApiName": "StretchDIBits",
            "prototype": ["int StretchDIBits(\\n  HDC              hdc,\\n  int              xDest,\\n  int              yDest,\\n  int              DestWidth,\\n  int              DestHeight,\\n  int              xSrc,\\n  int              ySrc,\\n  int              SrcWidth,\\n  int              SrcHeight,\\n  const VOID       *lpBits,\\n  const BITMAPINFO *lpbmi,\\n  UINT             iUsage,\\n  DWORD            rop\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "xDest": "Int32",
                "yDest": "Int32",
                "DestWidth": "Int32",
                "DestHeight": "Int32",
                "xSrc": "Int32",
                "ySrc": "Int32",
                "SrcWidth": "Int32",
                "SrcHeight": "Int32",
                "lpBits": "Pointer<Void>",
                "lpbmi": "Pointer<BITMAPINFO>",
                "iUsage": "Uint32",
                "rop": "Uint32"
            },
            "dartParams": {
                "hdc": "int",
                "xDest": "int",
                "yDest": "int",
                "DestWidth": "int",
                "DestHeight": "int",
                "xSrc": "int",
                "ySrc": "int",
                "SrcWidth": "int",
                "SrcHeight": "int",
                "lpBits": "Pointer<Void>",
                "lpbmi": "Pointer<BITMAPINFO>",
                "iUsage": "int",
                "rop": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The StretchDIBits function copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image to the specified destination rectangle. If the destination rectangle is larger than the source rectangle, this function stretches the rows and columns of color data to fit the destination rectangle. If the destination rectangle is smaller than the source rectangle, this function compresses the rows and columns by using the specified raster operation."
        },
        "SysAllocString": {
            "neutralApiName": "SysAllocString",
            "prototype": ["BSTR SysAllocString(\\n  const OLECHAR *psz\\n);"],
            "nativeReturn": "Pointer",
            "dartReturn": "Pointer",
            "nativeParams": {
                "psz": "Pointer<Utf16>"
            },
            "dartParams": {
                "psz": "Pointer<Utf16>"
            },
            "dllLibrary": "oleaut32",
            "comment": "Allocates a new string and copies the passed string into it."
        },
        "SysFreeString": {
            "neutralApiName": "SysFreeString",
            "prototype": ["void SysFreeString(\\n  BSTR bstrString\\n);"],
            "nativeReturn": "Void",
            "dartReturn": "void",
            "nativeParams": {
                "bstrString": "Pointer"
            },
            "dartParams": {
                "bstrString": "Pointer"
            },
            "dllLibrary": "oleaut32",
            "comment": "Deallocates a string allocated previously by SysAllocString, SysAllocStringByteLen, SysReAllocString, SysAllocStringLen, or SysReAllocStringLen."
        },
        "SysStringByteLen": {
            "neutralApiName": "SysStringByteLen",
            "prototype": ["UINT SysStringByteLen(\\n  BSTR bstr\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "bstr": "Pointer"
            },
            "dartParams": {
                "bstr": "Pointer"
            },
            "dllLibrary": "oleaut32",
            "comment": "Returns the length (in bytes) of a BSTR."
        },
        "SysStringLen": {
            "neutralApiName": "SysStringLen",
            "prototype": ["UINT SysStringLen(\\n  BSTR pbstr\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "pbstr": "Pointer"
            },
            "dartParams": {
                "pbstr": "Pointer"
            },
            "dllLibrary": "oleaut32",
            "comment": "Returns the length of a BSTR."
        },
        "SystemParametersInfoW": {
            "neutralApiName": "SystemParametersInfo",
            "prototype": ["BOOL SystemParametersInfoW(\\n  UINT  uiAction,\\n  UINT  uiParam,\\n  PVOID pvParam,\\n  UINT  fWinIni\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "uiAction": "Uint32",
                "uiParam": "Uint32",
                "pvParam": "Pointer",
                "fWinIni": "Uint32"
            },
            "dartParams": {
                "uiAction": "int",
                "uiParam": "int",
                "pvParam": "Pointer",
                "fWinIni": "int"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves or sets the value of one of the system-wide parameters. This function can also update the user profile while setting a parameter."
        },
        "TaskDialog": {
            "neutralApiName": "TaskDialog",
            "prototype": ["HRESULT TaskDialog(\\n  HWND                           hwndOwner,\\n  HINSTANCE                      hInstance,\\n  PCWSTR                         pszWindowTitle,\\n  PCWSTR                         pszMainInstruction,\\n  PCWSTR                         pszContent,\\n  TASKDIALOG_COMMON_BUTTON_FLAGS dwCommonButtons,\\n  PCWSTR                         pszIcon,\\n  int                            *pnButton\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hwndOwner": "Int32",
                "hInstance": "Int32",
                "pszWindowTitle": "Pointer<Utf16>",
                "pszMainInstruction": "Pointer<Utf16>",
                "pszContent": "Pointer<Utf16>",
                "dwCommonButtons": "Int32",
                "pszIcon": "Pointer<Utf16>",
                "pnButton": "Pointer<Int32>"
            },
            "dartParams": {
                "hwndOwner": "int",
                "hInstance": "int",
                "pszWindowTitle": "Pointer<Utf16>",
                "pszMainInstruction": "Pointer<Utf16>",
                "pszContent": "Pointer<Utf16>",
                "dwCommonButtons": "int",
                "pszIcon": "Pointer<Utf16>",
                "pnButton": "Pointer<Int32>"
            },
            "dllLibrary": "comctl32",
            "comment": "The TaskDialog function creates, displays, and operates a task dialog. The task dialog contains application-defined message text and title, icons, and any combination of predefined push buttons. This function does not support the registration of a callback function to receive notifications."
        },
        "TaskDialogIndirect": {
            "neutralApiName": "TaskDialogIndirect",
            "prototype": ["HRESULT TaskDialogIndirect(\\n  const TASKDIALOGCONFIG *pTaskConfig,\\n  int                    *pnButton,\\n  int                    *pnRadioButton,\\n  BOOL                   *pfVerificationFlagChecked\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "pTaskConfig": "Pointer<TASKDIALOGCONFIG>",
                "pnButton": "Pointer<Int32>",
                "pnRadioButton": "Pointer<Int32>",
                "pfVerificationFlagChecked": "Pointer<Int32>"
            },
            "dartParams": {
                "pTaskConfig": "Pointer<TASKDIALOGCONFIG>",
                "pnButton": "Pointer<Int32>",
                "pnRadioButton": "Pointer<Int32>",
                "pfVerificationFlagChecked": "Pointer<Int32>"
            },
            "dllLibrary": "comctl32",
            "comment": "The TaskDialogIndirect function creates, displays, and operates a task dialog. The task dialog contains application-defined icons, messages, title, verification check box, command links, push buttons, and radio buttons. This function can register a callback function to receive notification messages."
        },
        "TextOutW": {
            "neutralApiName": "TextOut",
            "prototype": ["BOOL TextOutW(\\n  HDC     hdc,\\n  int     x,\\n  int     y,\\n  LPCWSTR lpString,\\n  int     c\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hdc": "IntPtr",
                "x": "Int32",
                "y": "Int32",
                "lpString": "Pointer<Utf16>",
                "c": "Int32"
            },
            "dartParams": {
                "hdc": "int",
                "x": "int",
                "y": "int",
                "lpString": "Pointer<Utf16>",
                "c": "int"
            },
            "dllLibrary": "gdi32",
            "comment": "The TextOut function writes a character string at the specified location, using the currently selected font, background color, and text color."
        },
        "TranslateAcceleratorW": {
            "neutralApiName": "TranslateAccelerator",
            "prototype": ["int TranslateAcceleratorW(\\n  HWND   hWnd,\\n  HACCEL hAccTable,\\n  LPMSG  lpMsg\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr",
                "hAccTable": "IntPtr",
                "lpMsg": "Pointer<MSG>"
            },
            "dartParams": {
                "hWnd": "int",
                "hAccTable": "int",
                "lpMsg": "Pointer<MSG>"
            },
            "dllLibrary": "user32",
            "comment": "Processes accelerator keys for menu commands. The function translates a WM_KEYDOWN or WM_SYSKEYDOWN message to a WM_COMMAND or WM_SYSCOMMAND message (if there is an entry for the key in the specified accelerator table) and then sends the WM_COMMAND or WM_SYSCOMMAND message directly to the specified window procedure. TranslateAccelerator does not return until the window procedure has processed the message."
        },
        "TranslateMessage": {
            "neutralApiName": "TranslateMessage",
            "prototype": ["BOOL TranslateMessage(\\n  const MSG *lpMsg\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpMsg": "Pointer<MSG>"
            },
            "dartParams": {
                "lpMsg": "Pointer<MSG>"
            },
            "dllLibrary": "user32",
            "comment": "Translates virtual-key messages into character messages. The character messages are posted to the calling thread's message queue, to be read the next time the thread calls the GetMessage or PeekMessage function."
        },
        "UpdateProcThreadAttribute": {
            "neutralApiName": "UpdateProcThreadAttribute",
            "prototype": ["BOOL UpdateProcThreadAttribute(\\n  LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,\\n  DWORD                        dwFlags,\\n  DWORD_PTR                    Attribute,\\n  PVOID                        lpValue,\\n  SIZE_T                       cbSize,\\n  PVOID                        lpPreviousValue,\\n  PSIZE_T                      lpReturnSize\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpAttributeList": "Pointer",
                "dwFlags": "Uint32",
                "Attribute": "IntPtr",
                "lpValue": "Pointer",
                "cbSize": "IntPtr",
                "lpPreviousValue": "Pointer",
                "lpReturnSize": "Pointer<IntPtr>"
            },
            "dartParams": {
                "lpAttributeList": "Pointer",
                "dwFlags": "int",
                "Attribute": "int",
                "lpValue": "Pointer",
                "cbSize": "int",
                "lpPreviousValue": "Pointer",
                "lpReturnSize": "Pointer<IntPtr>"
            },
            "dllLibrary": "kernel32",
            "comment": "Updates the specified attribute in a list of attributes for process and thread creation."
        },
        "UpdateResourceW": {
            "neutralApiName": "UpdateResource",
            "prototype": ["BOOL UpdateResourceW(\\n  HANDLE  hUpdate,\\n  LPCWSTR lpType,\\n  LPCWSTR lpName,\\n  WORD    wLanguage,\\n  LPVOID  lpData,\\n  DWORD   cb\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hUpdate": "IntPtr",
                "lpType": "Pointer<Utf16>",
                "lpName": "Pointer<Utf16>",
                "wLanguage": "Uint16",
                "lpData": "Pointer",
                "cb": "Uint32"
            },
            "dartParams": {
                "hUpdate": "int",
                "lpType": "Pointer<Utf16>",
                "lpName": "Pointer<Utf16>",
                "wLanguage": "int",
                "lpData": "Pointer",
                "cb": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Adds, deletes, or replaces a resource in a portable executable (PE) file."
        },
        "UpdateWindow": {
            "neutralApiName": "UpdateWindow",
            "prototype": ["BOOL UpdateWindow(\\n  HWND hWnd\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hWnd": "IntPtr"
            },
            "dartParams": {
                "hWnd": "int"
            },
            "dllLibrary": "user32",
            "comment": "The UpdateWindow function updates the client area of the specified window by sending a WM_PAINT message to the window if the window's update region is not empty. The function sends a WM_PAINT message directly to the window procedure of the specified window, bypassing the application queue. If the update region is empty, no message is sent."
        },
        "VariantClear": {
            "neutralApiName": "VariantClear",
            "prototype": ["HRESULT VariantClear(\\n  VARIANTARG *pvarg\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "pvarg": "Pointer"
            },
            "dartParams": {
                "pvarg": "Pointer"
            },
            "dllLibrary": "oleaut32",
            "comment": "Clears a variant."
        },
        "VariantInit": {
            "neutralApiName": "VariantInit",
            "prototype": ["void VariantInit(\\n  VARIANTARG *pvarg\\n);"],
            "nativeReturn": "Void",
            "dartReturn": "void",
            "nativeParams": {
                "pvarg": "Pointer"
            },
            "dartParams": {
                "pvarg": "Pointer"
            },
            "dllLibrary": "oleaut32",
            "comment": "Initializes a variant."
        },
        "VerFindFileW": {
            "neutralApiName": "VerFindFile",
            "prototype": ["DWORD VerFindFileW(\\n  DWORD   uFlags,\\n  LPCWSTR szFileName,\\n  LPCWSTR szWinDir,\\n  LPCWSTR szAppDir,\\n  LPWSTR  szCurDir,\\n  PUINT   puCurDirLen,\\n  LPWSTR  szDestDir,\\n  PUINT   puDestDirLen\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "uFlags": "Uint32",
                "szFilename": "Pointer<Utf16>",
                "szWinDir": "Pointer<Utf16>",
                "szAppDir": "Pointer<Utf16>",
                "szCurDir": "Pointer<Utf16>",
                "puCurDirLen": "Pointer<Uint32>",
                "szDestDir": "Pointer<Utf16>",
                "puDestDirLen": "Pointer<Uint32>"
            },
            "dartParams": {
                "uFlags": "int",
                "szFilename": "Pointer<Utf16>",
                "szWinDir": "Pointer<Utf16>",
                "szAppDir": "Pointer<Utf16>",
                "szCurDir": "Pointer<Utf16>",
                "puCurDirLen": "Pointer<Uint32>",
                "szDestDir": "Pointer<Utf16>",
                "puDestDirLen": "Pointer<Uint32>"
            },
            "dllLibrary": "version",
            "comment": "Determines where to install a file based on whether it locates another version of the file in the system. The values VerFindFile returns in the specified buffers are used in a subsequent call to the VerInstallFile function."
        },
        "VerInstallFileW": {
            "neutralApiName": "VerInstallFile",
            "prototype": ["DWORD VerInstallFileW(\\n  DWORD   uFlags,\\n  LPCWSTR szSrcFileName,\\n  LPCWSTR szDestFileName,\\n  LPCWSTR szSrcDir,\\n  LPCWSTR szDestDir,\\n  LPCWSTR szCurDir,\\n  LPWSTR  szTmpFile,\\n  PUINT   puTmpFileLen\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "dwFlags": "Uint32",
                "szSrcFileName": "Pointer<Utf16>",
                "szDestFileName": "Pointer<Utf16>",
                "szSrcDir": "Pointer<Utf16>",
                "szDestDir": "Pointer<Utf16>",
                "szCurDir": "Pointer<Utf16>",
                "szTmpFile": "Pointer<Utf16>",
                "puTmpFileLen": "Pointer<Uint32>"
            },
            "dartParams": {
                "dwFlags": "int",
                "szSrcFileName": "Pointer<Utf16>",
                "szDestFileName": "Pointer<Utf16>",
                "szSrcDir": "Pointer<Utf16>",
                "szDestDir": "Pointer<Utf16>",
                "szCurDir": "Pointer<Utf16>",
                "szTmpFile": "Pointer<Utf16>",
                "puTmpFileLen": "Pointer<Uint32>"
            },
            "dllLibrary": "version",
            "comment": "Installs the specified file based on information returned from the VerFindFile function. VerInstallFile decompresses the file, if necessary, assigns a unique filename, and checks for errors, such as outdated files."
        },
        "VerLanguageNameW": {
            "neutralApiName": "VerLanguageName",
            "prototype": ["DWORD VerLanguageNameW(\\n  DWORD  wLang,\\n  LPWSTR szLang,\\n  DWORD  cchLang\\n);"],
            "nativeReturn": "Uint32",
            "dartReturn": "int",
            "nativeParams": {
                "wLang": "Uint32",
                "szLang": "Pointer<Utf16>",
                "cchLang": "Uint32"
            },
            "dartParams": {
                "wLang": "int",
                "szLang": "Pointer<Utf16>",
                "cchLang": "int"
            },
            "dllLibrary": "version",
            "comment": "Retrieves a description string for the language associated with a specified binary Microsoft language identifier."
        },
        "VerQueryValueW": {
            "neutralApiName": "VerQueryValue",
            "prototype": ["BOOL VerQueryValueW(\\n  LPCVOID pBlock,\\n  LPCWSTR lpSubBlock,\\n  LPVOID  *lplpBuffer,\\n  PUINT   puLen\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "pBlock": "Pointer",
                "lpSubBlock": "Pointer<Utf16>",
                "lplpBuffer": "Pointer<IntPtr>",
                "puLen": "Pointer<Uint32>"
            },
            "dartParams": {
                "pBlock": "Pointer",
                "lpSubBlock": "Pointer<Utf16>",
                "lplpBuffer": "Pointer<IntPtr>",
                "puLen": "Pointer<Uint32>"
            },
            "dllLibrary": "version",
            "comment": "Retrieves specified version information from the specified version-information resource. To retrieve the appropriate resource, before you call VerQueryValue, you must first call the GetFileVersionInfoSize function, and then the GetFileVersionInfo function."
        },
        "VirtualAlloc": {
            "neutralApiName": "VirtualAlloc",
            "prototype": ["LPVOID VirtualAlloc(\\n  LPVOID lpAddress,\\n  SIZE_T dwSize,\\n  DWORD  flAllocationType,\\n  DWORD  flProtect\\n);"],
            "nativeReturn": "Pointer<Void>",
            "dartReturn": "Pointer<Void>",
            "nativeParams": {
                "lpAddress": "Pointer<Void>",
                "dwSize": "IntPtr",
                "flAllocationType": "Uint32",
                "flProtect": "Uint32"
            },
            "dartParams": {
                "lpAddress": "Pointer<Void>",
                "dwSize": "int",
                "flAllocationType": "int",
                "flProtect": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Reserves, commits, or changes the state of a region of pages in the virtual address space of the calling process. Memory allocated by this function is automatically initialized to zero."
        },
        "VirtualFree": {
            "neutralApiName": "VirtualFree",
            "prototype": ["BOOL VirtualFree(\\n  LPVOID lpAddress,\\n  SIZE_T dwSize,\\n  DWORD  dwFreeType\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "lpAddress": "Pointer<Void>",
                "dwSize": "IntPtr",
                "dwFreeType": "Uint32"
            },
            "dartParams": {
                "lpAddress": "Pointer<Void>",
                "dwSize": "int",
                "dwFreeType": "int"
            },
            "dllLibrary": "kernel32",
            "comment": "Releases, decommits, or releases and decommits a region of pages within the virtual address space of the calling process."
        },
        "WaitMessage": {
            "neutralApiName": "WaitMessage",
            "prototype": ["BOOL WaitMessage();"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {},
            "dartParams": {},
            "dllLibrary": "user32",
            "comment": "Yields control to other threads when a thread has no other messages in its message queue. The WaitMessage function suspends the thread and does not return until a new message is placed in the thread's message queue."
        },
        "WindowFromPhysicalPoint": {
            "neutralApiName": "WindowFromPhysicalPoint",
            "prototype": ["HWND WindowFromPhysicalPoint(\\n  POINT Point\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "Point": "Int64"
            },
            "dartParams": {
                "Point": "int"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves a handle to the window that contains the specified physical point."
        },
        "WindowFromPoint": {
            "neutralApiName": "WindowFromPoint",
            "prototype": ["HWND WindowFromPoint(\\n  POINT Point\\n);"],
            "nativeReturn": "IntPtr",
            "dartReturn": "int",
            "nativeParams": {
                "Point": "Int64"
            },
            "dartParams": {
                "Point": "int"
            },
            "dllLibrary": "user32",
            "comment": "Retrieves a handle to the window that contains the specified point."
        },
        "WriteConsoleW": {
            "neutralApiName": "WriteConsole",
            "prototype": ["BOOL WINAPI WriteConsole(\\n  _In_Â Â Â Â Â Â Â Â Â Â Â Â Â HANDLE Â hConsoleOutput,\\n  _In_Â Â Â Â Â Â Â const VOID Â Â Â *lpBuffer,\\n  _In_Â Â Â Â Â Â Â Â Â Â Â Â Â DWORD Â Â nNumberOfCharsToWrite,\\n  _Out_opt_Â Â Â Â Â Â Â Â LPDWORD lpNumberOfCharsWritten,\\n  _Reserved_Â Â Â Â Â Â Â LPVOID Â lpReserved\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hConsoleOutput": "IntPtr",
                "lpBuffer": "Pointer",
                "nNumberOfCharsToWrite": "Uint32",
                "lpNumberOfCharsWritten": "Pointer<Uint32>",
                "lpReserved": "Pointer"
            },
            "dartParams": {
                "hConsoleOutput": "int",
                "lpBuffer": "Pointer",
                "nNumberOfCharsToWrite": "int",
                "lpNumberOfCharsWritten": "Pointer<Uint32>",
                "lpReserved": "Pointer"
            },
            "dllLibrary": "kernel32",
            "comment": "Writes a character string to a console screen buffer beginning at the current cursor location."
        },
        "WriteFile": {
            "neutralApiName": "WriteFile",
            "prototype": ["BOOL WriteFile(\\n  HANDLE       hFile,\\n  LPCVOID      lpBuffer,\\n  DWORD        nNumberOfBytesToWrite,\\n  LPDWORD      lpNumberOfBytesWritten,\\n  LPOVERLAPPED lpOverlapped\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hFile": "IntPtr",
                "lpBuffer": "Pointer",
                "nNumberOfBytesToWrite": "Uint32",
                "lpNumberOfBytesWritten": "Pointer<Uint32>",
                "lpOverlapped": "Pointer"
            },
            "dartParams": {
                "hFile": "int",
                "lpBuffer": "Pointer",
                "nNumberOfBytesToWrite": "int",
                "lpNumberOfBytesWritten": "Pointer<Uint32>",
                "lpOverlapped": "Pointer"
            },
            "dllLibrary": "kernel32",
            "comment": "Writes data to the specified file or input/output (I/O) device."
        },
        "WriteProcessMemory": {
            "neutralApiName": "WriteProcessMemory",
            "prototype": ["BOOL WriteProcessMemory(\\n  HANDLE  hProcess,\\n  LPVOID  lpBaseAddress,\\n  LPCVOID lpBuffer,\\n  SIZE_T  nSize,\\n  SIZE_T  *lpNumberOfBytesWritten\\n);"],
            "nativeReturn": "Int32",
            "dartReturn": "int",
            "nativeParams": {
                "hProcess": "IntPtr",
                "lpBaseAddress": "Pointer<Void>",
                "lpBuffer": "Pointer<Void>",
                "nSize": "IntPtr",
                "lpNumberOfBytesWritten": "Pointer<IntPtr>"
            },
            "dartParams": {
                "hProcess": "int",
                "lpBaseAddress": "Pointer<Void>",
                "lpBuffer": "Pointer<Void>",
                "nSize": "int",
                "lpNumberOfBytesWritten": "Pointer<IntPtr>"
            },
            "dllLibrary": "kernel32",
            "comment": "Writes data to an area of memory in a specified process. The entire area to be written to must be accessible or the operation fails."
        }
    }